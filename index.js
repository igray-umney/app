const { Bot, Keyboard, InlineKeyboard } = require('grammy');
const cron = require('node-cron');
const axios = require('axios');
const crypto = require('crypto');
const { Pool } = require('pg');
const express = require('express');
require('dotenv').config();

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook'–æ–≤
const app = express();
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

const bot = new Bot(process.env.BOT_TOKEN);

// –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
const PLANS = {
  month: { price: 19900, title: "1 –º–µ—Å—è—Ü", stars: 199 }, // —Ü–µ–Ω—ã –≤ –∫–æ–ø–µ–π–∫–∞—Ö –¥–ª—è –Æ–ö–∞—Å—Å–∞, –≤ Stars –¥–ª—è Telegram
  quarter: { price: 49900, title: "3 –º–µ—Å—è—Ü–∞", stars: 499 },
  half: { price: 99900, title: "6 –º–µ—Å—è—Ü–µ–≤", stars: 999 },
  year: { price: 199900, title: "1 –≥–æ–¥", stars: 1999 }
};

// –ö–æ–º–∞–Ω–¥—ã
bot.command('start', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'open_app')
    .row()
    .text('üíé –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø', 'premium')
    .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings');

  await ctx.reply(
    `üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã –¥–ª—è –º–∞–ª—ã—à–µ–π!
    
üë∂ –í–æ–∑—Ä–∞—Å—Ç: 1-2 –≥–æ–¥–∞
üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π

–ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!`,
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
bot.callbackQuery('open_app', async (ctx) => {
  const userId = ctx.from.id;
  const webAppUrl = `${process.env.WEBAPP_URL}?user_id=${userId}`;
  
  const keyboard = new InlineKeyboard()
    .webApp('üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', webAppUrl);
    
  await ctx.editMessageText(
    `üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`,
    { reply_markup: keyboard }
  );
});

bot.callbackQuery('premium', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('üí≥ –Æ–ö–∞—Å—Å–∞', 'pay_yukassa')
    .text('‚≠ê Telegram Stars', 'pay_stars')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_main');
    
  await ctx.editMessageText(
    `üíé –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç:
    
‚úÖ 20+ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
üìä –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ–±–µ–Ω–∫–∞  
üìö –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`,
    { reply_markup: keyboard }
  );
});

bot.callbackQuery('pay_yukassa', async (ctx) => {
  const keyboard = new InlineKeyboard();
  
  Object.entries(PLANS).forEach(([key, plan]) => {
    keyboard.text(`${plan.title} - ${plan.price/100}‚ÇΩ`, `yukassa_${key}`).row();
  });
  
  keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'premium');
  
  await ctx.editMessageText(
    `üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω (–Æ–ö–∞—Å—Å–∞):`,
    { reply_markup: keyboard }
  );
});

bot.callbackQuery('pay_stars', async (ctx) => {
  const keyboard = new InlineKeyboard();
  
  Object.entries(PLANS).forEach(([key, plan]) => {
    keyboard.text(`${plan.title} - ${plan.stars}‚≠ê`, `stars_${key}`).row();
  });
  
  keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'premium');
  
  await ctx.editMessageText(
    `‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω (Telegram Stars):`,
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Æ–ö–∞—Å—Å–∞
bot.callbackQuery(/^yukassa_(.+)$/, async (ctx) => {
  const plan = ctx.match[1];
  const planData = PLANS[plan];
  
  if (!planData) return;
  
  try {
    const userId = ctx.from.id;
    const paymentId = await createYookassaPayment(userId, plan, planData);
    
    if (paymentId) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
      await savePaymentInfo(userId, paymentId, plan, planData.price, 'yukassa');
      
      const keyboard = new InlineKeyboard()
        .url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', paymentId.confirmation.confirmation_url)
        .row()
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'premium');
        
      await ctx.editMessageText(
        `üí≥ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!
        
üìã –ü–ª–∞–Ω: ${planData.title}
üí∞ –°—É–º–º–∞: ${planData.price/100}‚ÇΩ

–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏.`,
        { reply_markup: keyboard }
      );
    } else {
      await ctx.reply('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    console.error('YooKassa payment error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π Stars
bot.callbackQuery(/^stars_(.+)$/, async (ctx) => {
  const plan = ctx.match[1];
  const planData = PLANS[plan];
  
  if (!planData) return;
  
  try {
    await ctx.answerCallbackQuery();
    await ctx.replyWithInvoice({
      title: `–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø - ${planData.title}`,
      description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º',
      payload: `premium_${plan}_${ctx.from.id}`,
      provider_token: '', // –î–ª—è Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
      currency: 'XTR', // Telegram Stars
      prices: [{ label: planData.title, amount: planData.stars }]
    });
  } catch (error) {
    console.error('Error creating Stars invoice:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π Stars
bot.on('pre_checkout_query', async (ctx) => {
  await ctx.answerPreCheckoutQuery(true);
});

bot.on('message:successful_payment', async (ctx) => {
  const payment = ctx.message.successful_payment;
  const userId = ctx.from.id;
  
  // TODO: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  
  const premiumUrl = `${process.env.WEBAPP_URL}/premium?user_id=${userId}&token=${generatePremiumToken(userId)}`;
  
  const keyboard = new InlineKeyboard()
    .webApp('üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—é', premiumUrl);
  
  await ctx.reply(
    `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
    
–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
‚úÖ –í—Å–µ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üìä –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π`,
    { reply_markup: keyboard }
  );
});

bot.callbackQuery('settings', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('üë∂ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞', 'change_age')
    .row()
    .text('‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'setup_reminders')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_main');
    
  await ctx.editMessageText(
    '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', 
    { reply_markup: keyboard }
  );
});

bot.callbackQuery('back_main', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'open_app')
    .row()
    .text('üíé –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø', 'premium')
    .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings');

  await ctx.editMessageText(
    `üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
üë∂ –í–æ–∑—Ä–∞—Å—Ç: 1-2 –≥–æ–¥–∞
üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π`,
    { reply_markup: keyboard }
  );
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generatePremiumToken(userId) {
  // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JWT
  return Buffer.from(`${userId}_${Date.now()}`).toString('base64');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Æ–ö–∞—Å—Å–æ–π
async function createYookassaPayment(userId, plan, planData) {
  const { v4: uuidv4 } = require('uuid');
  
  const paymentData = {
    amount: {
      value: (planData.price / 100).toFixed(2),
      currency: 'RUB'
    },
    confirmation: {
      type: 'redirect',
      return_url: `${process.env.WEBAPP_URL}/payment-success?user_id=${userId}&plan=${plan}`
    },
    capture: true,
    description: `–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ - ${planData.title}`,
    metadata: {
      user_id: userId,
      plan: plan,
      telegram_bot: 'kids_dev'
    }
  };

  try {
    const response = await axios.post(
      'https://api.yookassa.ru/v3/payments',
      paymentData,
      {
        headers: {
          'Authorization': `Basic ${Buffer.from(`${process.env.YUKASSA_SHOP_ID}:${process.env.YUKASSA_SECRET_KEY}`).toString('base64')}`,
          'Content-Type': 'application/json',
          'Idempotence-Key': uuidv4()
        }
      }
    );

    return response.data;
  } catch (error) {
    console.error('YooKassa API error:', error.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function savePaymentInfo(telegramId, paymentData, plan, amount, method) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await pool.query(
      'INSERT INTO users (telegram_id) VALUES ($1) ON CONFLICT (telegram_id) DO UPDATE SET telegram_id = $1 RETURNING id',
      [telegramId]
    );
    
    const userId = userResult.rows[0].id;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    await pool.query(
      `INSERT INTO subscriptions (user_id, plan_type, status, payment_method, payment_id, amount_paid)
       VALUES ($1, $2, 'pending', $3, $4, $5)`,
      [userId, plan, method, paymentData.id, amount]
    );
    
    return true;
  } catch (error) {
    console.error('Database error:', error);
    return false;
  }
}

async function activateSubscription(paymentId) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const result = await pool.query(
      `UPDATE subscriptions 
       SET status = 'active', 
           starts_at = CURRENT_TIMESTAMP,
           expires_at = CASE 
             WHEN plan_type = 'month' THEN CURRENT_TIMESTAMP + INTERVAL '1 month'
             WHEN plan_type = 'quarter' THEN CURRENT_TIMESTAMP + INTERVAL '3 months'
             WHEN plan_type = 'half' THEN CURRENT_TIMESTAMP + INTERVAL '6 months'
             WHEN plan_type = 'year' THEN CURRENT_TIMESTAMP + INTERVAL '1 year'
           END
       WHERE payment_id = $1 AND status = 'pending'
       RETURNING user_id, plan_type`,
      [paymentId]
    );
    
    if (result.rows.length > 0) {
      const { user_id, plan_type } = result.rows[0];
      
      // –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await pool.query('SELECT telegram_id FROM users WHERE id = $1', [user_id]);
      
      if (userResult.rows.length > 0) {
        return userResult.rows[0].telegram_id;
      }
    }
    
    return null;
  } catch (error) {
    console.error('Database error in activateSubscription:', error);
    return null;
  }
}

async function checkPremiumAccess(telegramId) {
  try {
    const result = await pool.query(
      `SELECT s.* FROM subscriptions s 
       JOIN users u ON s.user_id = u.id 
       WHERE u.telegram_id = $1 
       AND s.status = 'active' 
       AND s.expires_at > CURRENT_TIMESTAMP
       ORDER BY s.expires_at DESC 
       LIMIT 1`,
      [telegramId]
    );
    
    return result.rows.length > 0;
  } catch (error) {
    console.error('Database error in checkPremiumAccess:', error);
    return false;
  }
}

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–±–∞–∑–æ–≤–∞—è)
cron.schedule('0 10 * * *', () => {
  // TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  console.log('Sending morning reminders...');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
async function startApp() {
  // Webhook –¥–ª—è –Æ–ö–∞—Å—Å—ã
  app.post('/webhook/yookassa', async (req, res) => {
    try {
      const { type, object } = req.body;
      
      if (type === 'payment.succeeded') {
        const paymentId = object.id;
        const userId = object.metadata.user_id;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        const telegramId = await activateSubscription(paymentId);
        
        if (telegramId) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const premiumUrl = `${process.env.WEBAPP_URL}/premium?user_id=${telegramId}&token=${generatePremiumToken(telegramId)}`;
          
          const keyboard = new InlineKeyboard()
            .webApp('üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—é', premiumUrl);
          
          await bot.api.sendMessage(telegramId, 
            `üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
            
–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚úÖ 20+ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
üìä –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ–±–µ–Ω–∫–∞
üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
‚è∞ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`,
            { reply_markup: keyboard }
          );
        }
      }
      
      res.status(200).json({ status: 'ok' });
    } catch (error) {
      console.error('Webhook error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  // Health check endpoint
  app.get('/health', (req, res) => {
    res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
  });

  // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  app.get('/api/subscription/:telegramId', async (req, res) => {
    try {
      const { telegramId } = req.params;
      const hasPremium = await checkPremiumAccess(telegramId);
      
      res.json({ 
        hasPremium,
        telegramId: telegramId
      });
    } catch (error) {
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
  bot.start();
  console.log('Bot started successfully');
}

startApp().catch(console.error);
