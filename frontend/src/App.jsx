import React, { useState, useEffect } from 'react';

const ChildDevelopmentApp = () => {
  const [currentScreen, setCurrentScreen] = useState('main');
  const [isPremium, setIsPremium] = useState(false);
  const [showPayment, setShowPayment] = useState(false);
  const [paymentStatus, setPaymentStatus] = useState('idle');
  const [telegramUser, setTelegramUser] = useState(null);
  const [child, setChild] = useState({
    name: '–ê–Ω–¥—Ä–µ–π',
    age: 2,
    streak: 7
  });

  // Debug logs
  const [debugLogs, setDebugLogs] = useState([]);
  
  const addLog = (message) => {
    const time = new Date().toLocaleTimeString();
    setDebugLogs(prev => [...prev, `${time}: ${message}`].slice(-10));
  };

  // Telegram WebApp integration
  useEffect(() => {
    if (window.Telegram && window.Telegram.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      
      const user = tg.initDataUnsafe?.user;
      if (user) {
        setTelegramUser(user);
        setChild(prev => ({
          ...prev,
          name: user.first_name || '–ú–∞–ª—ã—à'
        }));
      }
      
      tg.setHeaderColor('#ffffff');
      tg.setBackgroundColor('#f8fafc');
    }
  }, []);

  // Payment functions
const createCardPayment = async () => {
  addLog('üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
  if (!window.Telegram?.WebApp) {
    addLog('‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    setPaymentStatus('error');
    return;
  }

  const tg = window.Telegram.WebApp;
  addLog(`üì± WebApp –≤–µ—Ä—Å–∏—è: ${tg.version}`);
  addLog(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${tg.initDataUnsafe?.user?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);

  if (!telegramUser?.id) {
    addLog('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    setPaymentStatus('error');
    return;
  }

  setPaymentStatus('processing');
  addLog(`üîë ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramUser.id}`);

  try {
    addLog('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    
    const response = await fetch('https://telegram-mini-app-production-39d0.up.railway.app/api/telegram/create-invoice', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: telegramUser.id,
        amount: 299,
        description: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü'
      })
    });

    addLog(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    addLog(`üì° Headers: ${JSON.stringify([...response.headers.entries()])}`);
    
    const responseText = await response.text();
    addLog(`üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${responseText}`);
    
    if (response.ok) {
      const data = JSON.parse(responseText);
      addLog(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: ${JSON.stringify(data)}`);
      
      // –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      addLog('‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞');
      setPaymentStatus('success');
      setIsPremium(true);
      
      setTimeout(() => {
        setShowPayment(false);
        setPaymentStatus('idle');
      }, 3000);
      
    } else {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${responseText}`);
      setPaymentStatus('error');
    }
    
} catch (error) {
  addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.name}: ${error.message}`);
  
  if (error.message.includes('Failed to fetch')) {
    addLog('üö´ CORS –æ—à–∏–±–∫–∞ - —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    addLog('üîÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  setPaymentStatus('error');
}
};

  const createStarsPayment = async () => {
    addLog('‚≠ê –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–ª–∞—Ç—É Stars');
    setPaymentStatus('processing');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Stars
    setTimeout(() => {
      setPaymentStatus('success');
      setIsPremium(true);
      addLog('‚úÖ –û–ø–ª–∞—Ç–∞ Stars —É—Å–ø–µ—à–Ω–∞ (—Ç–µ—Å—Ç)');
      setTimeout(() => {
        setShowPayment(false);
        setPaymentStatus('idle');
      }, 2000);
    }, 1500);
  };

const checkServerStatus = async () => {
  addLog('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...');
  
  try {
    const response = await fetch('https://telegram-mini-app-production-39d0.up.railway.app/', {
      method: 'GET'
    });
    
    if (response.ok) {
      const data = await response.text();
      addLog(`‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${data}`);
    } else {
      addLog(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: ${response.status}`);
    }
  } catch (error) {
    addLog(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
  }
};
  
  // Activities database
  const activities = {
    2: [
      {
        id: 1,
        title: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º',
        description: '–ò–∑—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è',
        duration: '20 –º–∏–Ω',
        category: '–õ–æ–≥–∏–∫–∞',
        premium: false,
        icon: 'üåà'
      },
      {
        id: 2,
        title: '–†–∏—Å–æ–≤–∞–Ω–∏–µ –ø–∞–ª—å—á–∏–∫–∞–º–∏',
        description: '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏',
        duration: '25 –º–∏–Ω',
        category: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
        premium: false,
        icon: 'üé®'
      },
      {
        id: 3,
        title: '–õ–µ–ø–∫–∞ –∏–∑ –ø–ª–∞—Å—Ç–∏–ª–∏–Ω–∞',
        description: '–†–∞–∑–≤–∏–≤–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É',
        duration: '30 –º–∏–Ω',
        category: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
        premium: true,
        icon: 'üé≠'
      }
    ]
  };

  const getActivities = () => activities[child.age] || [];
  const freeActivities = getActivities().filter(a => !a.premium);
  const premiumActivities = getActivities().filter(a => a.premium);

  // Payment Modal
  const PaymentModal = () => {
    if (!showPayment) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl p-6 max-w-md w-full max-h-[90vh] overflow-y-auto">
          <div className="text-center">
            <div className="bg-gradient-to-r from-purple-600 to-pink-600 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-white text-2xl">üëë</span>
            </div>
            
            <h2 className="text-2xl font-bold text-gray-800 mb-2">–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</h2>
            <p className="text-gray-600 mb-6">–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
            
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-4 mb-6">
              <div className="flex items-center justify-between">
                <span className="text-gray-600">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                <span className="text-2xl font-bold text-purple-600">299‚ÇΩ/–º–µ—Å</span>
              </div>
              <p className="text-sm text-gray-500 mt-1">–∏–ª–∏ 100 ‚≠ê Telegram Stars</p>
            </div>
            
            {paymentStatus === 'processing' && (
              <div className="mb-4">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto"></div>
                <p className="text-sm text-gray-600 mt-2">–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...</p>
              </div>
            )}
            
            {paymentStatus === 'success' && (
              <div className="mb-4 p-4 bg-green-50 rounded-lg">
                <div className="text-green-500 text-2xl mb-2">‚úÖ</div>
                <p className="text-green-800 font-semibold">–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</p>
                <p className="text-sm text-green-600">–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</p>
              </div>
            )}
            
            {paymentStatus === 'error' && (
              <div className="mb-4 p-4 bg-red-50 rounded-lg">
                <div className="text-red-500 text-2xl mb-2">‚ùå</div>
                <p className="text-red-800 font-semibold">–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</p>
                <p className="text-sm text-red-600">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</p>
              </div>
            )}

            {/* Debug Logs */}
            {debugLogs.length > 0 && (
              <div className="mb-4 p-3 bg-gray-100 rounded-lg text-left">
                <h4 className="text-sm font-bold text-gray-700 mb-2">üîç –õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏:</h4>
                <div className="text-xs text-gray-600 space-y-1 max-h-32 overflow-y-auto">
                  {debugLogs.map((log, index) => (
                    <div key={index}>{log}</div>
                  ))}
                </div>
                <button 
                  onClick={() => setDebugLogs([])}
                  className="text-xs text-red-500 mt-2"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
                </button>
              </div>
            )}
            
            <div className="space-y-3">
              <button
                onClick={() => {
                  addLog(`üë§ telegramUser: ${JSON.stringify(telegramUser)}`);
                  addLog(`üåê window.Telegram: ${!!window.Telegram}`);
                  addLog(`üì± WebApp: ${!!window.Telegram?.WebApp}`);
                }}
                className="w-full bg-gray-500 text-white py-2 rounded-lg font-medium"
              >
                üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </button>
              <button
  onClick={checkServerStatus}
  className="w-full bg-orange-500 text-white py-2 rounded-lg font-medium"
>
  üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
</button>
              <button
                onClick={createCardPayment}
                disabled={paymentStatus === 'processing'}
                className="w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 rounded-lg font-medium hover:from-blue-600 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
              >
                <span className="mr-2">üí≥</span>
                {paymentStatus === 'processing' ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π'}
              </button>
              
              <button
                onClick={createStarsPayment}
                disabled={paymentStatus === 'processing'}
                className="w-full bg-gradient-to-r from-yellow-500 to-yellow-600 text-white py-3 rounded-lg font-medium hover:from-yellow-600 hover:to-yellow-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
              >
                <span className="mr-2">‚≠ê</span>
                {paymentStatus === 'processing' ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û–ø–ª–∞—Ç–∏—Ç—å Stars'}
              </button>
              
              <button
                onClick={() => setShowPayment(false)}
                className="w-full bg-gray-300 text-gray-700 py-3 rounded-lg font-medium hover:bg-gray-400 transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Main Screen
  if (currentScreen === 'main') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
        <PaymentModal />
        
        <div className="bg-white shadow-sm px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-800">–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã</h1>
              <p className="text-gray-600">–í–æ–∑—Ä–∞—Å—Ç: {child.age} –≥–æ–¥–∞</p>
            </div>
            <div className="flex items-center space-x-3">
              <div className="flex items-center bg-orange-100 px-3 py-1 rounded-full">
                <span className="text-sm font-medium text-orange-800">üèÜ {child.streak} –¥–Ω–µ–π</span>
              </div>
              {isPremium && (
                <div className="flex items-center bg-purple-100 px-3 py-1 rounded-full">
                  <span className="text-sm font-medium text-purple-800">üëë –ü—Ä–µ–º–∏—É–º</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {!isPremium && (
          <div className="mx-4 mt-4 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg p-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-bold flex items-center">üëë –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</h3>
                <p className="text-sm opacity-90">–û—Ç–∫—Ä–æ–π –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</p>
              </div>
              <button 
                onClick={() => setShowPayment(true)}
                className="bg-white text-purple-600 px-4 py-2 rounded-lg font-medium hover:bg-gray-100 transition-colors"
              >
                –ü–æ–¥–∫–ª—é—á–∏—Ç—å
              </button>
            </div>
          </div>
        )}

        <div className="px-4 py-6">
          <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
            <div className="text-center mb-6">
              <div className="bg-gradient-to-r from-green-400 to-blue-500 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-white text-3xl">‚ñ∂Ô∏è</span>
              </div>
              <h2 className="text-xl font-bold text-gray-800 mb-2">–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è!</h2>
              <p className="text-gray-600">–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è {child.name}</p>
            </div>
            
            <button 
              onClick={() => setCurrentScreen('activities')}
              className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white py-4 rounded-xl font-medium text-lg hover:from-green-600 hover:to-blue-600 transition-all transform hover:scale-105"
            >
              –ù–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            </button>
          </div>

          {/* Stats */}
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-white rounded-xl p-4 shadow-sm">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-2xl font-bold text-blue-600">{getActivities().length}</p>
                  <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
                </div>
                <span className="text-2xl">üéØ</span>
              </div>
            </div>
            <div className="bg-white rounded-xl p-4 shadow-sm">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-2xl font-bold text-purple-600">{isPremium ? '–ü—Ä–µ–º–∏—É–º' : '–ë–∞–∑–æ–≤—ã–π'}</p>
                  <p className="text-sm text-gray-600">–¢–∞—Ä–∏—Ñ</p>
                </div>
                <span className="text-2xl">{isPremium ? 'üëë' : '‚≠ê'}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Activities Screen
  if (currentScreen === 'activities') {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="bg-white shadow-sm px-4 py-4 sticky top-0 z-10">
          <div className="flex items-center">
            <button 
              onClick={() => setCurrentScreen('main')}
              className="mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <span className="text-2xl">‚Üê</span>
            </button>
            <div>
              <h1 className="text-xl font-bold text-gray-800">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h1>
              <p className="text-sm text-gray-600">{child.age} –≥–æ–¥–∞ ‚Ä¢ {getActivities().length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</p>
            </div>
          </div>
        </div>

        <div className="px-4 py-6">
          {/* Free Activities */}
          {freeActivities.length > 0 && (
            <div className="mb-8">
              <h2 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                <span className="text-green-500 mr-2">üÜì</span>
                –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({freeActivities.length})
              </h2>
              <div className="space-y-3">
                {freeActivities.map((activity) => (
                  <div key={activity.id} className="bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center mb-2">
                          <span className="text-2xl mr-3">{activity.icon}</span>
                          <div className="flex-1">
                            <h3 className="font-semibold text-gray-800">{activity.title}</h3>
                            <div className="flex items-center gap-2 mt-1">
                              <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                                {activity.category}
                              </span>
                              <span className="text-xs text-gray-500 flex items-center">
                                ‚è±Ô∏è {activity.duration}
                              </span>
                            </div>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 ml-11">{activity.description}</p>
                      </div>
                      <button className="ml-4 bg-green-500 text-white px-4 py-2 rounded-lg font-medium hover:bg-green-600 transition-colors text-sm">
                        –ù–∞—á–∞—Ç—å
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Premium Activities */}
          {premiumActivities.length > 0 && (
            <div className="mb-6">
              <h2 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                <span className="text-yellow-500 mr-2">üëë</span>
                –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({premiumActivities.length})
              </h2>
              <div className="space-y-3">
                {premiumActivities.map((activity) => (
                  <div key={activity.id} className={`bg-white rounded-xl p-4 shadow-sm ${!isPremium ? 'opacity-75' : 'hover:shadow-md transition-shadow'}`}>
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center mb-2">
                          <span className="text-2xl mr-3">{activity.icon}</span>
                          <div className="flex-1">
                            <h3 className="font-semibold text-gray-800 flex items-center">
                              {activity.title}
                              {!isPremium && <span className="ml-2 text-gray-400">üîí</span>}
                            </h3>
                            <div className="flex items-center gap-2 mt-1">
                              <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium">
                                {activity.category}
                              </span>
                              <span className="text-xs text-gray-500 flex items-center">
                                ‚è±Ô∏è {activity.duration}
                              </span>
                            </div>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 ml-11">{activity.description}</p>
                      </div>
                      <button 
                        onClick={() => isPremium ? null : setShowPayment(true)}
                        className={`ml-4 px-4 py-2 rounded-lg font-medium transition-colors text-sm ${
                          isPremium 
                            ? 'bg-purple-500 text-white hover:bg-purple-600' 
                            : 'bg-gray-300 text-gray-500 cursor-pointer'
                        }`}
                      >
                        {isPremium ? '–ù–∞—á–∞—Ç—å' : '–ü—Ä–µ–º–∏—É–º'}
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Upgrade prompt */}
          {!isPremium && premiumActivities.length > 0 && (
            <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-xl p-6 text-white text-center">
              <h3 className="text-lg font-bold mb-2">üöÄ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!</h3>
              <p className="text-sm opacity-90 mb-4">
                –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ {premiumActivities.length} –ø—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
              </p>
              <button 
                onClick={() => setShowPayment(true)}
                className="bg-white text-purple-600 px-6 py-3 rounded-lg font-medium hover:bg-gray-100 transition-colors"
              >
                –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º - 299‚ÇΩ/–º–µ—Å
              </button>
            </div>
          )}
        </div>
      </div>
    );
  }

  return <div>–≠–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
};

export default ChildDevelopmentApp;
