import os, sys
sys.path.append(os.path.dirname(__file__))  # —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å database.py —Ä—è–¥–æ–º
from database import Database


import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import aiohttp
from database import Database
from payments import PaymentHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://your-app.vercel.app")
YOOKASSA_SECRET = os.getenv("YOOKASSA_SECRET")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()
payment_handler = PaymentHandler(YOOKASSA_SHOP_ID, YOOKASSA_SECRET)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(CommandStart())
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.register_user(user_id, username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    is_premium = await db.check_premium(user_id)
    
    text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

üéØ **–†–∞–∑–≤–∏–≤–∞–π–∫–∞** - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ—Ç–µ–π –æ—Ç 1 –¥–æ 7 –ª–µ—Ç

{'üëë –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞!' if is_premium else 'üÜì –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    webapp_url = f"{WEBAPP_URL}?user_id={user_id}&premium={str(is_premium).lower()}"
    keyboard.row(
        InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=webapp_url)
        )
    )
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
    if not is_premium:
        keyboard.row(
            InlineKeyboardButton(text="üëë –ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium")
        )
    else:
        keyboard.row(
            InlineKeyboardButton(text="üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="manage_subscription")
        )
    
    keyboard.row(
        InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", callback_data="about"),
        InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    )
    
    await message.answer(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ Premium
@dp.callback_query(F.data == "buy_premium")
async def buy_premium(callback: types.CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Stars (299 ‚≠ê)", callback_data="pay_stars")
    )
    keyboard.row(
        InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π (299‚ÇΩ)", callback_data="pay_card")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    text = """
üëë **Premium –ø–æ–¥–ø–∏—Å–∫–∞**

‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã  
‚úÖ –ü–æ–ª–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å—Ç–∞—Ç–µ–π
‚úÖ –í–∏–¥–µ–æ—É—Ä–æ–∫–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚úÖ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 299‚ÇΩ/–º–µ—Å—è—Ü

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars
@dp.callback_query(F.data == "pay_stars")
async def pay_with_stars(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
    await bot.send_invoice(
        chat_id=user_id,
        title="Premium –ø–æ–¥–ø–∏—Å–∫–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞",
        description="–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        payload=f"premium_month_{user_id}",
        provider_token="",  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è Stars
        currency="XTR",  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Stars
        prices=[LabeledPrice(label="Premium –Ω–∞ 1 –º–µ—Å—è—Ü", amount=299)],
        start_parameter=f"premium_{user_id}",
        photo_url="https://your-app.vercel.app/premium-banner.jpg",
        photo_size=100,
        photo_width=640,
        photo_height=360
    )
    await callback.answer()

# –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ –ÆKassa
@dp.callback_query(F.data == "pay_card") 
async def pay_with_card(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
    payment_url = await payment_handler.create_payment(
        amount=299,
        description="Premium –ø–æ–¥–ø–∏—Å–∫–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞", 
        user_id=user_id
    )
    
    if payment_url:
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)
        )
        keyboard.row(
            InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{user_id}")
        )
        keyboard.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium")
        )
        
        await callback.message.edit_text(
            "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
            reply_markup=keyboard.as_markup()
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Stars
@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Premium –≤ –ë–î
    await db.activate_premium(user_id, days=30)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
        "üëë Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}&premium=true")
            )
        ]])
    )

# Pre-checkout query –¥–ª—è Stars
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa
@dp.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    is_paid = await payment_handler.check_payment_status(user_id)
    
    if is_paid:
        await db.activate_premium(user_id, days=30)
        await callback.message.edit_text(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            "üëë Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}&premium=true")
                )
            ]])
        )
    else:
        await callback.answer(
            "‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            show_alert=True
        )

# –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
@dp.callback_query(F.data == "about")
async def about_app(callback: types.CallbackQuery):
    text = """
üì± **–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –†–∞–∑–≤–∏–≤–∞–π–∫–∞**

–†–∞–∑–≤–∏–≤–∞–π–∫–∞ - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ—Ç–µ–π, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π.

**–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ 100+ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∫–∞–∂–¥—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-7 –ª–µ—Ç)
‚Ä¢ –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
‚Ä¢ –í–∏–¥–µ–æ—É—Ä–æ–∫–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤

**–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã:**
‚Ä¢ 1-2 –≥–æ–¥–∞: –°–µ–Ω—Å–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
‚Ä¢ 2-3 –≥–æ–¥–∞: –ú–µ–ª–∫–∞—è –º–æ—Ç–æ—Ä–∏–∫–∞ –∏ —Ä–µ—á—å
‚Ä¢ 3-4 –≥–æ–¥–∞: –õ–æ–≥–∏–∫–∞ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ  
‚Ä¢ 4-5 –ª–µ—Ç: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ
‚Ä¢ 5-7 –ª–µ—Ç: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ

–í–µ—Ä—Å–∏—è: 2.0
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.callback_query(F.data == "support")
async def support(callback: types.CallbackQuery):
    text = """
üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:

üìß Email: support@razvivajka.ru
üí¨ Telegram: @razvivajka_support

–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

**Q: –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?**
A: –ù–∞–∂–º–∏—Ç–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é

**Q: –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö?**
A: –î–∞, –ø—Ä–∏–≤—è–∑–∫–∞ –∏–¥–µ—Ç –∫ –≤–∞—à–µ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É

**Q: –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?**
A: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await start_command(callback.message)
    await callback.answer()

# –í–µ–±—Ö—É–∫ –¥–ª—è –ÆKassa
async def yookassa_webhook(request):
    data = await request.json()
    
    if data.get("event") == "payment.succeeded":
        payment_data = data.get("object", {})
        user_id = payment_data.get("metadata", {}).get("user_id")
        
        if user_id:
            await db.activate_premium(int(user_id), days=30)
            await bot.send_message(
                user_id,
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π."
            )
    
    return {"status": "ok"}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await db.init()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
