import React, { useState, useEffect } from 'react';

const ChildDevelopmentApp = () => {
  const [currentScreen, setCurrentScreen] = useState('main');
  const [isPremium, setIsPremium] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedActivity, setSelectedActivity] = useState(null);
  const [showPayment, setShowPayment] = useState(false);
  const [paymentStatus, setPaymentStatus] = useState('idle');
  const [telegramUser, setTelegramUser] = useState(null);
  const [botConnected, setBotConnected] = useState(false);
  const [child, setChild] = useState({
    name: '–ê–Ω–¥—Ä–µ–π',
    age: 2,
    streak: 7
  });
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot
  const [notificationSettings, setNotificationSettings] = useState({
    enabled: false,
    time: '19:00',
    frequency: 'daily',
    reminderType: 'motivational',
    botUsername: 'razvivay–∫–∞_bot', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    quietHours: {
      enabled: true,
      start: '21:00',
      end: '08:00'
    },
    weekendMode: false,
    customDays: {
      monday: true,
      tuesday: true,
      wednesday: true,
      thursday: true,
      friday: true,
      saturday: true,
      sunday: false
    }
  });

  // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const [progressData] = useState({
    weeklyActivities: [true, true, false, true, true, false, false],
    totalActivities: 45,
    totalTime: 12.5,
    skillsProgress: {
      motor: 85,
      speech: 70,
      logic: 60,
      creativity: 90,
      development: 75
    },
    achievements: [
      { id: 1, title: '–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è', description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', icon: 'üéØ', unlocked: true },
      { id: 2, title: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –≥–µ–Ω–∏–π', description: '10 —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π', icon: 'üé®', unlocked: true },
      { id: 3, title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', description: '15 –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–≥—Ä', icon: 'üîç', unlocked: false, progress: 12 },
      { id: 4, title: '–ú–µ—Å—è—Ü —Ä–∞–∑–≤–∏—Ç–∏—è', description: '30 –¥–Ω–µ–π –∑–∞–Ω—è—Ç–∏–π', icon: 'üìÖ', unlocked: false, progress: 15 }
    ],
    recentActivities: [
      { name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º', category: '–õ–æ–≥–∏–∫–∞', date: '2025-01-13', duration: 20 },
      { name: '–†–∏—Å–æ–≤–∞–Ω–∏–µ –ø–∞–ª—å—á–∏–∫–∞–º–∏', category: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', date: '2025-01-13', duration: 25 },
      { name: '–ü—Ä–æ—Å—Ç—ã–µ –ø–∞–∑–ª—ã', category: '–õ–æ–≥–∏–∫–∞', date: '2025-01-12', duration: 15 }
    ]
  });

  // –ë–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  const [activitiesDatabase] = useState({
    1: [
      {
        id: 1,
        title: '–°–µ–Ω—Å–æ—Ä–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞',
        description: '–ò—Å—Å–ª–µ–¥—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã: –ø–µ—Å–æ–∫, –∫—Ä—É–ø—ã, —Ç–∫–∞–Ω–∏',
        duration: '15 –º–∏–Ω',
        category: '–ú–æ—Ç–æ—Ä–∏–∫–∞',
        premium: false,
        icon: 'ü§≤',
        difficulty: '–õ–µ–≥–∫–æ',
        materials: ['–ö–æ—Ä–æ–±–∫–∞', '–†–∏—Å/–≥—Ä–µ—á–∫–∞', '–¢–∫–∞–Ω–∏ —Ä–∞–∑–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã', '–ú–µ–ª–∫–∏–µ –∏–≥—Ä—É—à–∫–∏'],
        instructions: [
          '–í–æ–∑—å–º–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∫–æ—Ä–æ–±–∫—É –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä',
          '–ù–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë —Ä–∏—Å–æ–º, –≥—Ä–µ—á–∫–æ–π –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫—Ä—É–ø–æ–π',
          '–î–æ–±–∞–≤—å—Ç–µ –∫—É—Å–æ—á–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π',
          '–°–ø—Ä—è—á—å—Ç–µ –º–µ–ª–∫–∏–µ –∏–≥—Ä—É—à–∫–∏ –≤ –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ',
          '–ü—É—Å—Ç—å –º–∞–ª—ã—à –∏—Å—Å–ª–µ–¥—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä—É–∫–∞–º–∏',
          '–ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏ –Ω–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã'
        ],
        benefits: '–†–∞–∑–≤–∏–≤–∞–µ—Ç —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è, –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –≤–Ω–∏–º–∞–Ω–∏—è',
        ageRange: '12-18 –º–µ—Å—è—Ü–µ–≤'
      },
      {
        id: 2,
        title: '–ò–≥—Ä–∞ —Å –≤–æ–¥–æ–π',
        description: '–ü–µ—Ä–µ–ª–∏–≤–∞–µ–º –≤–æ–¥—É –º–µ–∂–¥—É –µ–º–∫–æ—Å—Ç—è–º–∏, —Ä–∞–∑–≤–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é',
        duration: '20 –º–∏–Ω',
        category: '–ú–æ—Ç–æ—Ä–∏–∫–∞',
        premium: false,
        icon: 'üíß',
        difficulty: '–õ–µ–≥–∫–æ',
        materials: ['2-3 –µ–º–∫–æ—Å—Ç–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞', '–í–æ–¥–∞', '–ì—É–±–∫–∞', '–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ'],
        instructions: [
          '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –µ–º–∫–æ—Å—Ç–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞',
          '–ù–∞–ª–µ–π—Ç–µ –≤–æ–¥—É –≤ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö',
          '–ü–æ–∫–∞–∂–∏—Ç–µ –º–∞–ª—ã—à—É, –∫–∞–∫ –ø–µ—Ä–µ–ª–∏–≤–∞—Ç—å –≤–æ–¥—É',
          '–ü—É—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ',
          '–î–∞–π—Ç–µ –≥—É–±–∫—É - –ø—É—Å—Ç—å –≤—ã–∂–∏–º–∞–µ—Ç –≤–æ–¥—É',
          '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ –¥–ª—è —É–±–æ—Ä–∫–∏!'
        ],
        benefits: '–†–∞–∑–≤–∏–≤–∞–µ—Ç –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—è, —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è',
        ageRange: '10-24 –º–µ—Å—è—Ü–∞'
      },
      {
        id: 3,
        title: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
        description: '–ò–∑—É—á–∞–µ–º –∑–≤—É–∫–∏: –ø–æ–≥—Ä–µ–º—É—à–∫–∏, –±–∞—Ä–∞–±–∞–Ω, –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∏',
        duration: '10 –º–∏–Ω',
        category: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
        premium: true,
        icon: 'üéµ',
        difficulty: '–õ–µ–≥–∫–æ',
        materials: ['–ü–æ–≥—Ä–µ–º—É—à–∫–∏', '–ö–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∏', '–°–∞–º–æ–¥–µ–ª—å–Ω—ã–π –±–∞—Ä–∞–±–∞–Ω', '–õ–æ–∂–∫–∏'],
        instructions: [
          '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–∞–∑–Ω—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
          '–ü–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∑–≤—É–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ',
          '–ü—É—Å—Ç—å –º–∞–ª—ã—à –ø–æ–ø—Ä–æ–±—É–µ—Ç —Å–∞–º',
          '–ò–≥—Ä–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —Ä–∏—Ç–º—ã',
          '–ü–æ–π—Ç–µ –ø–µ—Å–µ–Ω–∫–∏ –ø–æ–¥ –∞–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç',
          '–¢–∞–Ω—Ü—É–π—Ç–µ –ø–æ–¥ –º—É–∑—ã–∫—É'
        ],
        benefits: '–†–∞–∑–≤–∏–≤–∞–µ—Ç —Å–ª—É—Ö, —á—É–≤—Å—Ç–≤–æ —Ä–∏—Ç–º–∞, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏–π, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
        ageRange: '8-18 –º–µ—Å—è—Ü–µ–≤'
      }
    ],
    2: [
      {
        id: 4,
        title: '–°–æ–±–∏—Ä–∞–µ–º –ø–∏—Ä–∞–º–∏–¥–∫—É',
        description: '–†–∞–∑–≤–∏–≤–∞–µ–º –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤',
        duration: '15 –º–∏–Ω',
        category: '–õ–æ–≥–∏–∫–∞',
        premium: false,
        icon: 'üìê',
        difficulty: '–õ–µ–≥–∫–æ',
        materials: ['–ü–∏—Ä–∞–º–∏–¥–∫–∞ —Å –∫–æ–ª—å—Ü–∞–º–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞'],
        instructions: [
          '–ü–æ–∫–∞–∂–∏—Ç–µ —Ä–µ–±–µ–Ω–∫—É –ø–∏—Ä–∞–º–∏–¥–∫—É',
          '–†–∞–∑–±–µ—Ä–∏—Ç–µ –µ—ë –Ω–∞ —á–∞—Å—Ç–∏',
          '–û–±—ä—è—Å–Ω–∏—Ç–µ –ø–æ–Ω—è—Ç–∏—è "–±–æ–ª—å—à–æ–π" –∏ "–º–∞–ª–µ–Ω—å–∫–∏–π"',
          '–ü—É—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫ –ø–æ–ø—Ä–æ–±—É–µ—Ç —Å–æ–±—Ä–∞—Ç—å —Å–∞–º',
          '–ü–æ–º–æ–≥–∞–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏',
          '–•–≤–∞–ª–∏—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
        ],
        benefits: '–†–∞–∑–≤–∏–≤–∞–µ—Ç –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É, –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤, –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —Ç–µ—Ä–ø–µ–Ω–∏–µ',
        ageRange: '18-30 –º–µ—Å—è—Ü–µ–≤'
      },
      {
        id: 5,
        title: '–†–∏—Å–æ–≤–∞–Ω–∏–µ –ø–∞–ª—å—á–∏–∫–∞–º–∏',
        description: '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏',
        duration: '25 –º–∏–Ω',
        category: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
        premium: false,
        icon: 'üé®',
        difficulty: '–°—Ä–µ–¥–Ω–µ',
        materials: ['–ü–∞–ª—å—á–∏–∫–æ–≤—ã–µ –∫—Ä–∞—Å–∫–∏', '–ë–æ–ª—å—à–æ–π –ª–∏—Å—Ç –±—É–º–∞–≥–∏', '–í–ª–∞–∂–Ω—ã–µ —Å–∞–ª—Ñ–µ—Ç–∫–∏'],
        instructions: [
          '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ',
          '–ù–∞–¥–µ–Ω—å—Ç–µ –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞ —Å—Ç–∞—Ä—É—é –æ–¥–µ–∂–¥—É',
          '–ü–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –º–∞–∫–∞—Ç—å –ø–∞–ª–µ—Ü –≤ –∫—Ä–∞—Å–∫—É',
          '–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤',
          '–†–∏—Å—É–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã',
          '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ–Ω–∫–∞'
        ],
        benefits: '–†–∞–∑–≤–∏–≤–∞–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É, —Ü–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è',
        ageRange: '18-36 –º–µ—Å—è—Ü–µ–≤'
      },
      {
        id: 6,
        title: '–õ–µ–ø–∫–∞ –∏–∑ –ø–ª–∞—Å—Ç–∏–ª–∏–Ω–∞',
        description: '–†–∞–∑–≤–∏–≤–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É',
        duration: '30 –º–∏–Ω',
        category: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
        premium: true,
        icon: 'üé≠',
        difficulty: '–°—Ä–µ–¥–Ω–µ',
        materials: ['–ú—è–≥–∫–∏–π –ø–ª–∞—Å—Ç–∏–ª–∏–Ω', '–î–æ—Å–∫–∞ –¥–ª—è –ª–µ–ø–∫–∏', '–ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–æ—á–∫–∏'],
        instructions: [
          '–†–∞–∑–æ–≥—Ä–µ–π—Ç–µ –ø–ª–∞—Å—Ç–∏–ª–∏–Ω –≤ —Ä—É–∫–∞—Ö',
          '–ü–æ–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–µ–º—ã: –∫–∞—Ç–∞–Ω–∏–µ, —Å–ø–ª—é—â–∏–≤–∞–Ω–∏–µ',
          '–õ–µ–ø–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã: —à–∞—Ä–∏–∫–∏, –∫–æ–ª–±–∞—Å–∫–∏',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–æ—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–≥—É—Ä',
          '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö',
          '–ù–µ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –∏–¥–µ–∞–ª—å–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É'
        ],
        benefits: '–†–∞–∑–≤–∏–≤–∞–µ—Ç –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —É—Å–∏–¥—á–∏–≤–æ—Å—Ç—å',
        ageRange: '24-36 –º–µ—Å—è—Ü–µ–≤'
      }
    ],
    3: [
      {
        id: 7,
        title: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º',
        description: '–ò–∑—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è',
        duration: '20 –º–∏–Ω',
        category: '–õ–æ–≥–∏–∫–∞',
        premium: false,
        icon: 'üåà',
        difficulty: '–õ–µ–≥–∫–æ',
        materials: ['–¶–≤–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã', '4-5 –∫–æ—Ä–æ–±–æ—á–µ–∫ –∏–ª–∏ –µ–º–∫–æ—Å—Ç–µ–π'],
        instructions: [
          '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã 4-5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤',
          '–ü–æ–∫–∞–∂–∏—Ç–µ —Ä–µ–±–µ–Ω–∫—É, –∫–∞–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–≤–µ—Ç–∞–º',
          '–ù–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–π —Ü–≤–µ—Ç –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ',
          '–ü—É—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–µ',
          '–£—Å–ª–æ–∂–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É, –¥–æ–±–∞–≤–∏–≤ –±–æ–ª—å—à–µ —Ü–≤–µ—Ç–æ–≤'
        ],
        benefits: '–†–∞–∑–≤–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –≤–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å',
        ageRange: '2-4 –≥–æ–¥–∞'
      },
      {
        id: 8,
        title: '–ü—Ä–æ—Å—Ç—ã–µ –ø–∞–∑–ª—ã',
        description: '–ü–∞–∑–ª—ã –∏–∑ 4-6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ä–∞–∑–≤–∏–≤–∞–µ–º –ª–æ–≥–∏–∫—É',
        duration: '25 –º–∏–Ω',
        category: '–õ–æ–≥–∏–∫–∞',
        premium: false,
        icon: 'üß©',
        difficulty: '–°—Ä–µ–¥–Ω–µ',
        materials: ['–ü–∞–∑–ª—ã –∏–∑ 4-6 –∫—Ä—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤', '–ö–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞'],
        instructions: [
          '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∑–ª —Å –∫—Ä—É–ø–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏',
          '–ü–æ–∫–∞–∂–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É',
          '–†–∞–∑–±–µ—Ä–∏—Ç–µ –ø–∞–∑–ª –Ω–∞ —á–∞—Å—Ç–∏',
          '–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–π—Ç–∏ —É–≥–ª–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏',
          '–°–æ–±–∏—Ä–∞–π—Ç–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, —Ö–≤–∞–ª—è –∑–∞ —É—Å–ø–µ—Ö–∏',
          '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π'
        ],
        benefits: '–†–∞–∑–≤–∏–≤–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, —Ç–µ—Ä–ø–µ–Ω–∏–µ, –º–µ–ª–∫—É—é –º–æ—Ç–æ—Ä–∏–∫—É',
        ageRange: '2,5-4 –≥–æ–¥–∞'
      },
      {
        id: 9,
        title: '–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã',
        description: '–ò–≥—Ä–∞–µ–º –≤ –¥–æ–∫—Ç–æ—Ä–∞, –ø–æ–≤–∞—Ä–∞, –≤–æ–¥–∏—Ç–µ–ª—è',
        duration: '30 –º–∏–Ω',
        category: '–†–∞–∑–≤–∏—Ç–∏–µ',
        premium: true,
        icon: 'üë®‚Äç‚öïÔ∏è',
        difficulty: '–°—Ä–µ–¥–Ω–µ',
        materials: ['–ò–≥—Ä—É—à–µ—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–ö–æ—Å—Ç—é–º—ã –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç—ã', '–ö—É–∫–ª—ã/–∏–≥—Ä—É—à–∫–∏'],
        instructions: [
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–≥—Ä—ã (–¥–æ–∫—Ç–æ—Ä, –ø–æ–≤–∞—Ä, –∏ —Ç.–¥.)',
          '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã',
          '–ü–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å',
          '–ü—É—Å—Ç—å —Ä–µ–±–µ–Ω–æ–∫ –ø–æ–ø—Ä–æ–±—É–µ—Ç —Å–∞–º',
          '–ú–µ–Ω—è–π—Ç–µ—Å—å —Ä–æ–ª—è–º–∏',
          '–ü—Ä–∏–¥—É–º—ã–≤–∞–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏'
        ],
        benefits: '–†–∞–∑–≤–∏–≤–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–µ—á—å, —ç–º–ø–∞—Ç–∏—é, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π',
        ageRange: '2,5-5 –ª–µ—Ç'
      }
    ]
  });

  // –ë–∞–∑–∞ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const [motivationalMessages] = useState({
    daily: [
      'üåü –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å {name}! –°–µ–≥–æ–¥–Ω—è –∏–∑—É—á–∞–µ–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ?',
      'üí´ {name} –∂–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ß—Ç–æ –≤—ã–±–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è?',
      'üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º streak! –£–∂–µ {streak} –¥–Ω–µ–π —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è –≤–º–µ—Å—Ç–µ!',
      'üöÄ –ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å {name}! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ!',
      '‚≠ê {name} –≥–æ—Ç–æ–≤(–∞) –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º! –ù–∞—á–∏–Ω–∞–µ–º?'
    ],
    streak: [
      'üî• –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! {name} –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!',
      'üëë –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π streak - {streak} –¥–Ω–µ–π! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!',
      'üèÜ {streak} –¥–Ω–µ–π –∑–∞–Ω—è—Ç–∏–π! {name} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–º–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!'
    ],
    encouragement: [
      'üí™ –î–∞–∂–µ 10 –º–∏–Ω—É—Ç –∑–∞–Ω—è—Ç–∏–π –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–æ–ª—å–∑—É {name}!',
      'üå± –ö–∞–∂–¥–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç {name} —Ä–∞—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!',
      '‚ù§Ô∏è {name} –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –≤–∞–º–∏ –∑–∞ –∏–≥—Ä–∞–º–∏!'
    ]
  });

  // –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notificationHistory, setNotificationHistory] = useState([
    {
      id: 1,
      message: '–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å –ê–Ω–¥—Ä–µ–π! –°–µ–≥–æ–¥–Ω—è –∏–∑—É—á–∞–µ–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ?',
      timestamp: '2025-01-14 19:00',
      type: 'daily',
      opened: true
    },
    {
      id: 2,
      message: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –ê–Ω–¥—Ä–µ–π –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!',
      timestamp: '2025-01-13 19:00',
      type: 'streak',
      opened: true
    }
  ]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const checkNotificationStatus = async () => {
    if (telegramUser?.id) {
      try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è:', telegramUser.id);
        
        const response = await fetch(`https://telegram-bot-server-production-8dfb.up.railway.app/api/telegram/status/${telegramUser.id}`);
        
        if (response.ok) {
          const status = await response.json();
          console.log('üìä –°—Ç–∞—Ç—É—Å —Å —Å–µ—Ä–≤–µ—Ä–∞:', status);
          
          if (status.connected) {
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            setBotConnected(true);
            setNotificationSettings(prev => ({
              ...prev,
              enabled: status.enabled,
              time: status.time || prev.time,
              reminderType: status.type || prev.reminderType
            }));
          } else {
            console.log('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            setBotConnected(false);
          }
        } else {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
          setBotConnected(false);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        setBotConnected(false);
      }
    }
  };

  // Telegram Mini App integration
  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (window.Telegram && window.Telegram.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = tg.initDataUnsafe?.user;
      if (user) {
        setTelegramUser(user);
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setChild(prev => ({
          ...prev,
          name: user.first_name || '–ú–∞–ª—ã—à'
        }));
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
      tg.setHeaderColor('#ffffff');
      tg.setBackgroundColor('#f8fafc');
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      tg.onEvent('backButtonClicked', () => {
        if (currentScreen !== 'main') {
          setCurrentScreen('main');
          setSelectedActivity(null);
        }
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      if (currentScreen !== 'main') {
        tg.BackButton.show();
      } else {
        tg.BackButton.hide();
      }
    }
  }, [currentScreen]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (telegramUser) {
      const timer = setTimeout(() => {
        checkNotificationStatus();
      }, 2000);
      
      return () => clearTimeout(timer);
    }
  }, [telegramUser]);
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot
  const connectToBot = async () => {
    try {
      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É, telegramUser:', telegramUser);
      
      const response = await fetch('https://telegram-bot-server-production-8dfb.up.railway.app/api/telegram/connect', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: telegramUser?.id,
          username: telegramUser?.username,
          settings: notificationSettings
        })
      });

      const result = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

      if (response.ok && result.success) {
        setBotConnected(true);
        setNotificationSettings(prev => ({ ...prev, enabled: true }));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!';
        if (result.needsBotStart) {
          message += '\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start';
        }
        
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.showAlert(message);
        } else {
          alert(message);
        }
      } else {
        throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É:', error);
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: ' + error.message);
      } else {
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: ' + error.message);
      }
    }
  };

  const sendTestNotification = async () => {
    if (!botConnected) {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.showAlert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–æ—Ç—É!');
      }
      return;
    }

    try {
      const message = getRandomMessage(notificationSettings.reminderType);
      
      const response = await fetch('https://telegram-bot-server-production-8dfb.up.railway.app/api/telegram/send-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: telegramUser?.id,
          message: message
        })
      });

      if (response.ok) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        const newNotification = {
          id: Date.now(),
          message: message,
          timestamp: new Date().toISOString(),
          type: notificationSettings.reminderType,
          opened: false
        };
        
        setNotificationHistory(prev => [newNotification, ...prev]);
        
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.showAlert('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Payments
  const createTelegramPayment = async () => {
    if (!window.Telegram?.WebApp) {
      alert('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram');
      return;
    }

    setPaymentStatus('processing');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Telegram Bot API
      const response = await fetch('https://telegram-bot-server-production-8dfb.up.railway.app/api/telegram/create-invoice', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: telegramUser?.id,
          amount: 299,
          description: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞',
          payload: `premium_${Date.now()}`
        })
      });

      if (response.ok) {
        const { invoiceUrl } = await response.json();
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ Telegram
        window.Telegram.WebApp.openInvoice(invoiceUrl, (status) => {
          if (status === 'paid') {
            setPaymentStatus('success');
            setIsPremium(true);
            setTimeout(() => {
              setShowPayment(false);
              setPaymentStatus('idle');
            }, 2000);
          } else {
            setPaymentStatus('error');
          }
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      setPaymentStatus('error');
    }
  };

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
  const createStarsPayment = async () => {
    if (!window.Telegram?.WebApp) {
      alert('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram');
      return;
    }

    setPaymentStatus('processing');
    
    try {
      // –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars
      const response = await fetch('/api/telegram/create-stars-invoice', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: telegramUser?.id,
          stars: 50, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
          description: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –†–∞–∑–≤–∏–≤–∞–π–∫–∞',
          payload: `premium_stars_${Date.now()}`
        })
      });

      if (response.ok) {
        const { invoiceUrl } = await response.json();
        
        window.Telegram.WebApp.openInvoice(invoiceUrl, (status) => {
          if (status === 'paid') {
            setPaymentStatus('success');
            setIsPremium(true);
            setTimeout(() => {
              setShowPayment(false);
              setPaymentStatus('idle');
            }, 2000);
          } else {
            setPaymentStatus('error');
          }
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      setPaymentStatus('error');
    }
  };

  // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  const simulatePaymentSuccess = () => {
    setPaymentStatus('success');
    setIsPremium(true);
    setTimeout(() => {
      setShowPayment(false);
      setPaymentStatus('idle');
    }, 2000);
  };

  // –£—Ç–∏–ª–∏—Ç—ã
  const getAgeText = (age) => {
    if (age === 1) return '–≥–æ–¥';
    if (age < 5) return '–≥–æ–¥–∞';
    return '–ª–µ—Ç';
  };

  const getCategoryColor = (category) => {
    const colors = {
      '–ú–æ—Ç–æ—Ä–∏–∫–∞': 'bg-blue-100 text-blue-800',
      '–†–µ—á—å': 'bg-green-100 text-green-800',
      '–õ–æ–≥–∏–∫–∞': 'bg-purple-100 text-purple-800',
      '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ': 'bg-pink-100 text-pink-800',
      '–†–∞–∑–≤–∏—Ç–∏–µ': 'bg-orange-100 text-orange-800'
    };
    return colors[category] || 'bg-gray-100 text-gray-800';
  };

  const getDifficultyColor = (difficulty) => {
    const colors = {
      '–õ–µ–≥–∫–æ': 'bg-green-100 text-green-800',
      '–°—Ä–µ–¥–Ω–µ': 'bg-yellow-100 text-yellow-800',
      '–°–ª–æ–∂–Ω–æ': 'bg-red-100 text-red-800'
    };
    return colors[difficulty] || 'bg-gray-100 text-gray-800';
  };

  const getNotificationTypeColor = (type) => {
    const colors = {
      'daily': 'bg-blue-100 text-blue-800',
      'streak': 'bg-orange-100 text-orange-800',
      'encouragement': 'bg-green-100 text-green-800',
      'reminder': 'bg-purple-100 text-purple-800'
    };
    return colors[type] || 'bg-gray-100 text-gray-800';
  };

  const getFilteredActivities = () => {
    const activities = activitiesDatabase[child.age] || [];
    if (selectedCategory === 'all') {
      return activities;
    }
    return activities.filter(activity => activity.category === selectedCategory);
  };

  const getActivityCategories = () => {
    const activities = activitiesDatabase[child.age] || [];
    const categories = [...new Set(activities.map(activity => activity.category))];
    return categories.map(cat => ({
      id: cat,
      name: cat,
      count: activities.filter(a => a.category === cat).length
    }));
  };

  const getRandomMessage = (type) => {
    const messages = motivationalMessages[type] || motivationalMessages.daily;
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    return randomMessage
      .replace('{name}', child.name)
      .replace('{streak}', child.streak);
  };

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã –¥–ª—è Telegram
  const PaymentModal = () => {
    if (!showPayment) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl p-6 max-w-md w-full">
          <div className="text-center">
            <div className="bg-gradient-to-r from-purple-600 to-pink-600 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-white text-2xl">üëë</span>
            </div>
            
            <h2 className="text-2xl font-bold text-gray-800 mb-2">–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</h2>
            <p className="text-gray-600 mb-6">–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
            
            <div className="bg-gray-50 rounded-lg p-4 mb-6">
              <h3 className="font-semibold text-gray-800 mb-3">–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–µ–º–∏—É–º:</h3>
              <ul className="text-sm text-gray-600 space-y-2">
                <li className="flex items-center">
                  <span className="text-green-500 mr-2">‚úì</span>
                  –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                </li>
                <li className="flex items-center">
                  <span className="text-green-500 mr-2">‚úì</span>
                  –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–∑–≤–∏—Ç–∏—è
                </li>
                <li className="flex items-center">
                  <span className="text-green-500 mr-2">‚úì</span>
                  –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                </li>
                <li className="flex items-center">
                  <span className="text-green-500 mr-2">‚úì</span>
                  –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                </li>
                <li className="flex items-center">
                  <span className="text-green-500 mr-2">‚úì</span>
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                </li>
              </ul>
            </div>
            
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-4 mb-6">
              <div className="flex items-center justify-between">
                <span className="text-gray-600">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                <span className="text-2xl font-bold text-purple-600">299‚ÇΩ/–º–µ—Å</span>
              </div>
              <p className="text-sm text-gray-500 mt-1">–∏–ª–∏ 50 ‚≠ê Telegram Stars</p>
            </div>
            
            {paymentStatus === 'processing' && (
              <div className="mb-4">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto"></div>
                <p className="text-sm text-gray-600 mt-2">–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...</p>
              </div>
            )}
            
            {paymentStatus === 'success' && (
              <div className="mb-4 p-4 bg-green-50 rounded-lg">
                <div className="text-green-500 text-2xl mb-2">‚úì</div>
                <p className="text-green-800 font-semibold">–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</p>
                <p className="text-sm text-green-600">–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</p>
              </div>
            )}
            
            {paymentStatus === 'error' && (
              <div className="mb-4 p-4 bg-red-50 rounded-lg">
                <div className="text-red-500 text-2xl mb-2">‚úó</div>
                <p className="text-red-800 font-semibold">–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</p>
                <p className="text-sm text-red-600">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</p>
              </div>
            )}
            
            <div className="space-y-3">
              <button
                onClick={createTelegramPayment}
                disabled={paymentStatus === 'processing'}
                className="w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 rounded-lg font-medium hover:from-blue-600 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
              >
                <span className="mr-2">üí≥</span>
                {paymentStatus === 'processing' ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π'}
              </button>
              
              <button
                onClick={createStarsPayment}
                disabled={paymentStatus === 'processing'}
                className="w-full bg-gradient-to-r from-yellow-500 to-yellow-600 text-white py-3 rounded-lg font-medium hover:from-yellow-600 hover:to-yellow-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
              >
                <span className="mr-2">‚≠ê</span>
                {paymentStatus === 'processing' ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û–ø–ª–∞—Ç–∏—Ç—å Stars'}
              </button>
              
              <button
                onClick={simulatePaymentSuccess}
                className="w-full bg-green-500 text-white py-3 rounded-lg font-medium hover:bg-green-600 transition-colors"
              >
                –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (–¥–ª—è —Ç–µ—Å—Ç–∞)
              </button>
              
              <button
                onClick={() => setShowPayment(false)}
                className="w-full bg-gray-300 text-gray-700 py-3 rounded-lg font-medium hover:bg-gray-400 transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram
  if (currentScreen === 'main') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
        <div className="bg-white shadow-sm px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-800">–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã</h1>
              <p className="text-gray-600">–í–æ–∑—Ä–∞—Å—Ç: {child.age} {getAgeText(child.age)}</p>
              {telegramUser && (
                <p className="text-xs text-gray-500 mt-1">
                  Telegram: @{telegramUser.username || telegramUser.first_name}
                </p>
              )}
            </div>
            <div className="flex items-center space-x-3">
              <div className="flex items-center bg-orange-100 px-3 py-1 rounded-full">
                <span className="text-sm font-medium text-orange-800">üèÜ {child.streak} –¥–Ω–µ–π</span>
              </div>
              <button 
                onClick={() => setCurrentScreen('notifications')}
                className="p-2 bg-gray-100 rounded-full hover:bg-gray-200 transition-colors relative"
              >
                <span className="text-xl">üîî</span>
                {botConnected && (
                  <span className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full"></span>
                )}
              </button>
              <button 
                onClick={() => setCurrentScreen('settings')}
                className="p-2 bg-gray-100 rounded-full hover:bg-gray-200 transition-colors"
              >
                ‚öôÔ∏è
              </button>
            </div>
          </div>
        </div>

        {/* Telegram Bot Connection */}
        {!botConnected && (
          <div className="mx-4 mt-4 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-bold flex items-center">ü§ñ –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                <p className="text-sm opacity-90">–ë–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö –≤ Telegram</p>
              </div>
              <button 
                onClick={connectToBot}
                className="bg-white bg-opacity-20 text-white px-4 py-2 rounded-lg font-medium hover:bg-opacity-30 transition-colors"
              >
                –ü–æ–¥–∫–ª—é—á–∏—Ç—å
              </button>
            </div>
          </div>
        )}

        {/* Notification Status */}
        {botConnected && (
          <div className="mx-4 mt-4 bg-gradient-to-r from-green-500 to-green-600 rounded-lg p-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-bold flex items-center">‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã</h3>
                <p className="text-sm opacity-90">–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {notificationSettings.time}</p>
              </div>
              <button 
                onClick={() => setCurrentScreen('notifications')}
                className="bg-white bg-opacity-20 text-white px-4 py-2 rounded-lg font-medium hover:bg-opacity-30 transition-colors"
              >
                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
              </button>
            </div>
          </div>
        )}

        {!isPremium && (
          <div className="mx-4 mt-4 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg p-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-bold flex items-center">üëë –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</h3>
                <p className="text-sm opacity-90">–û—Ç–∫—Ä–æ–π –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</p>
              </div>
              <button 
                onClick={() => setShowPayment(true)}
                className="bg-white text-purple-600 px-4 py-2 rounded-lg font-medium hover:bg-gray-100 transition-colors"
              >
                –ü–æ–¥–∫–ª—é—á–∏—Ç—å
              </button>
            </div>
          </div>
        )}

        <div className="px-4 py-6">
          <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
            <div className="text-center mb-6">
              <div className="bg-gradient-to-r from-green-400 to-blue-500 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-white text-3xl">‚ñ∂Ô∏è</span>
              </div>
              <h2 className="text-xl font-bold text-gray-800 mb-2">–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è!</h2>
              <p className="text-gray-600">–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è {child.name}</p>
            </div>
            
            <button 
              onClick={() => setCurrentScreen('activities')}
              className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white py-4 rounded-xl font-medium text-lg hover:from-green-600 hover:to-blue-600 transition-all transform hover:scale-105"
            >
              –ù–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            </button>
          </div>

          <div className="grid grid-cols-2 gap-4 mb-6">
            <div className="bg-white rounded-xl p-4 shadow-sm">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-2xl font-bold text-blue-600">{(activitiesDatabase[child.age] || []).length}</p>
                  <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
                </div>
                <span className="text-2xl">üéØ</span>
              </div>
            </div>
            <div className="bg-white rounded-xl p-4 shadow-sm">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-2xl font-bold text-purple-600">{progressData.totalTime}—á</p>
                  <p className="text-sm text-gray-600">–í—Ä–µ–º—è —Ä–∞–∑–≤–∏—Ç–∏—è</p>
                </div>
                <span className="text-2xl">‚è∞</span>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <button 
              onClick={() => setCurrentScreen('progress')}
              className="bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow"
            >
              <div className="flex items-center justify-center mb-2">
                <span className="text-2xl">üìÖ</span>
              </div>
              <p className="text-sm font-medium text-gray-800">–ü—Ä–æ–≥—Ä–µ—Å—Å</p>
            </button>
            <button 
              onClick={() => setCurrentScreen('library')}
              className="bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow"
            >
              <div className="flex items-center justify-center mb-2">
                <span className="text-2xl">üìö</span>
              </div>
              <p className="text-sm font-medium text-gray-800">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞</p>
            </button>
          </div>
        </div>

        {/* Age Selector for testing */}
        <div className="px-4 pb-6">
          <div className="bg-gray-100 rounded-lg p-4">
            <p className="text-sm text-gray-600 mb-2">–¢–µ—Å—Ç –≤–æ–∑—Ä–∞—Å—Ç–æ–≤:</p>
            <div className="flex gap-2 flex-wrap">
              {[1,2,3,4,5,6,7].map(age => (
                <button 
                  key={age}
                  onClick={() => setChild({...child, age})}
                  className={`px-3 py-1 rounded text-sm ${
                    child.age === age ? 'bg-blue-500 text-white' : 'bg-white text-gray-600'
                  }`}
                >
                  {age} {getAgeText(age)}
                </button>
              ))}
            </div>
          </div>
        </div>

        <PaymentModal />
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot
  if (currentScreen === 'notifications') {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="bg-white shadow-sm px-4 py-4 sticky top-0 z-10">
          <div className="flex items-center">
            <button 
              onClick={() => setCurrentScreen('main')}
              className="mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <span className="text-2xl">‚Üê</span>
            </button>
            <div>
              <h1 className="text-xl font-bold text-gray-800">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h1>
              <p className="text-sm text-gray-600">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ Telegram</p>
            </div>
          </div>
        </div>

        <div className="px-4 py-6">
          {/* Bot Connection Status */}
          <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-lg font-bold text-gray-800">Telegram Bot</h2>
                <p className="text-sm text-gray-600">@{notificationSettings.botUsername}</p>
              </div>
              <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                botConnected ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
              }`}>
                {botConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
              </div>
            </div>

            {!botConnected ? (
              <div className="space-y-4">
                <div className="bg-blue-50 rounded-lg p-4">
                  <h3 className="font-semibold text-blue-900 mb-2">–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</h3>
                  <ol className="text-sm text-blue-800 space-y-1">
                    <li>1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @{notificationSettings.botUsername} –≤ Telegram</li>
                    <li>2. –ù–∞–∂–º–∏—Ç–µ /start</li>
                    <li>3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"</li>
                  </ol>
                </div>
                
                <button
                  onClick={connectToBot}
                  className="w-full bg-blue-500 text-white py-3 rounded-lg font-medium hover:bg-blue-600 transition-colors"
                >
                  –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
                </button>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="bg-green-50 rounded-lg p-4">
                  <h3 className="font-semibold text-green-900 mb-2">‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</h3>
                  <p className="text-sm text-green-800">
                    –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –ø—Ä—è–º–æ –≤ Telegram
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                  </label>
                  <input 
                    type="time" 
                    value={notificationSettings.time}
                    onChange={(e) => setNotificationSettings({
                      ...notificationSettings, 
                      time: e.target.value
                    })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                  </label>
                  <select 
                    value={notificationSettings.frequency}
                    onChange={(e) => setNotificationSettings({
                      ...notificationSettings, 
                      frequency: e.target.value
                    })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
                    <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
                    <option value="custom">–í—ã–±—Ä–∞—Ç—å –¥–Ω–∏</option>
                  </select>
                </div>
              </div>
            )}
          </div>

          {/* Notification Type */}
          {botConnected && (
            <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
              <h2 className="text-lg font-bold text-gray-800 mb-4">–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π</h2>
              <div className="space-y-3">
                {[
                  { 
                    value: 'motivational', 
                    label: '–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ', 
                    description: '–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π',
                    example: getRandomMessage('daily')
                  },
                  { 
                    value: 'simple', 
                    label: '–ü—Ä–æ—Å—Ç—ã–µ', 
                    description: '–ö—Ä–∞—Ç–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏–π',
                    example: `–í—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π —Å ${child.name}!`
                  },
                  { 
                    value: 'streak', 
                    label: '–° streak', 
                    description: '–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
                    example: getRandomMessage('streak')
                  }
                ].map((type) => (
                  <button
                    key={type.value}
                    onClick={() => setNotificationSettings({
                      ...notificationSettings,
                      reminderType: type.value
                    })}
                    className={`w-full p-4 rounded-lg border-2 transition-colors text-left ${
                      notificationSettings.reminderType === type.value
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-semibold text-gray-800">{type.label}</h3>
                      {notificationSettings.reminderType === type.value && (
                        <span className="text-blue-500">‚úì</span>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{type.description}</p>
                    <p className="text-xs text-gray-500 italic">"{type.example}"</p>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Test Notification */}
          {botConnected && (
            <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
              <h2 className="text-lg font-bold text-gray-800 mb-4">–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h2>
              <p className="text-sm text-gray-600 mb-4">
                –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
              </p>
              
              <div className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded-lg mb-4">
                <div className="flex items-center mb-2">
                  <span className="text-blue-500 mr-2">ü§ñ</span>
                  <span className="font-semibold text-blue-900">–†–∞–∑–≤–∏–≤–∞–π–∫–∞ –ë–æ—Ç</span>
                  <span className="text-xs text-blue-600 ml-auto">{notificationSettings.time}</span>
                </div>
                <p className="text-blue-800">
                  {getRandomMessage(notificationSettings.reminderType)}
                </p>
              </div>

              <button 
                onClick={sendTestNotification}
                className="w-full bg-blue-500 text-white py-3 rounded-lg font-medium hover:bg-blue-600 transition-colors"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              </button>
            </div>
          )}

          {/* Notification History */}
          <div className="bg-white rounded-xl p-6 shadow-sm">
            <h2 className="text-lg font-bold text-gray-800 mb-4">–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
            <div className="space-y-3">
              {notificationHistory.map((notification) => (
                <div 
                  key={notification.id} 
                  className={`p-3 rounded-lg ${
                    notification.opened ? 'bg-gray-50' : 'bg-blue-50'
                  }`}
                >
                  <div className="flex items-center justify-between mb-2">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getNotificationTypeColor(notification.type)}`}>
                      {notification.type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ' : 
                       notification.type === 'streak' ? 'Streak' : '–î—Ä—É–≥–æ–µ'}
                    </span>
                    <span className="text-xs text-gray-500">
                      {new Date(notification.timestamp).toLocaleString('ru-RU')}
                    </span>
                  </div>
                  <p className="text-sm text-gray-700">{notification.message}</p>
                  {!notification.opened && (
                    <span className="inline-block w-2 h-2 bg-blue-500 rounded-full mt-2"></span>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

// –≠–∫—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  if (currentScreen === 'activities') {
    const categories = getActivityCategories();
    const filteredActivities = getFilteredActivities();
    const freeActivities = filteredActivities.filter(a => !a.premium);
    const premiumActivities = filteredActivities.filter(a => a.premium);

    return (
      <div className="min-h-screen bg-gray-50">
        <div className="bg-white shadow-sm px-4 py-4 sticky top-0 z-10">
          <div className="flex items-center">
            <button 
              onClick={() => {
                setSelectedActivity(null);
                setCurrentScreen('main');
              }}
              className="mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <span className="text-2xl">‚Üê</span>
            </button>
            <div>
              <h1 className="text-xl font-bold text-gray-800">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h1>
              <p className="text-sm text-gray-600">{child.age} {getAgeText(child.age)} ‚Ä¢ {filteredActivities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</p>
            </div>
          </div>
        </div>

        <div className="px-4 py-6">
          {/* Categories Filter */}
          <div className="mb-6">
            <h2 className="text-lg font-bold text-gray-800 mb-4">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
            <div className="flex gap-2 overflow-x-auto pb-2">
              <button
                onClick={() => setSelectedCategory('all')}
                className={`px-4 py-2 rounded-full whitespace-nowrap transition-all ${
                  selectedCategory === 'all'
                    ? 'bg-blue-500 text-white'
                    : 'bg-white text-gray-600 hover:bg-gray-100'
                }`}
              >
                –í—Å–µ ({(activitiesDatabase[child.age] || []).length})
              </button>
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`px-4 py-2 rounded-full whitespace-nowrap transition-all ${
                    selectedCategory === category.id
                      ? 'bg-blue-500 text-white'
                      : 'bg-white text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  {category.name} ({category.count})
                </button>
              ))}
            </div>
          </div>

          {/* Free Activities */}
          {freeActivities.length > 0 && (
            <div className="mb-8">
              <h2 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                <span className="text-green-500 mr-2">üÜì</span>
                –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({freeActivities.length})
              </h2>
              <div className="space-y-3">
                {freeActivities.map((activity) => (
                  <div key={activity.id} className="bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center mb-2">
                          <span className="text-2xl mr-3">{activity.icon}</span>
                          <div className="flex-1">
                            <h3 className="font-semibold text-gray-800">{activity.title}</h3>
                            <div className="flex items-center gap-2 mt-1">
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(activity.category)}`}>
                                {activity.category}
                              </span>
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(activity.difficulty)}`}>
                                {activity.difficulty}
                              </span>
                              <span className="text-xs text-gray-500 flex items-center">
                                ‚è±Ô∏è {activity.duration}
                              </span>
                            </div>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 ml-11 mb-2">{activity.description}</p>
                        <p className="text-xs text-gray-500 ml-11">–í–æ–∑—Ä–∞—Å—Ç: {activity.ageRange}</p>
                      </div>
                      <div className="ml-4 flex flex-col gap-2">
                        <button 
                          onClick={() => setSelectedActivity(activity)}
                          className="bg-blue-500 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-600 transition-colors text-sm"
                        >
                          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </button>
                        <button 
                          onClick={() => {
                            if (window.Telegram?.WebApp) {
                              window.Telegram.WebApp.showAlert(`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "${activity.title}" –Ω–∞—á–∞—Ç–∞! üéØ`);
                            } else {
                              alert(`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "${activity.title}" –Ω–∞—á–∞—Ç–∞! üéØ`);
                            }
                          }}
                          className="bg-green-500 text-white px-4 py-2 rounded-lg font-medium hover:bg-green-600 transition-colors text-sm"
                        >
                          –ù–∞—á–∞—Ç—å
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Premium Activities */}
          {premiumActivities.length > 0 && (
            <div className="mb-6">
              <h2 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                <span className="text-yellow-500 mr-2">üëë</span>
                –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ({premiumActivities.length})
              </h2>
              <div className="space-y-3">
                {premiumActivities.map((activity) => (
                  <div key={activity.id} className={`bg-white rounded-xl p-4 shadow-sm ${!isPremium ? 'opacity-75' : 'hover:shadow-md transition-shadow'}`}>
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center mb-2">
                          <span className="text-2xl mr-3">{activity.icon}</span>
                          <div className="flex-1">
                            <h3 className="font-semibold text-gray-800 flex items-center">
                              {activity.title}
                              {!isPremium && <span className="ml-2 text-gray-400">üîí</span>}
                            </h3>
                            <div className="flex items-center gap-2 mt-1">
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(activity.category)}`}>
                                {activity.category}
                              </span>
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(activity.difficulty)}`}>
                                {activity.difficulty}
                              </span>
                              <span className="text-xs text-gray-500 flex items-center">
                                ‚è±Ô∏è {activity.duration}
                              </span>
                            </div>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 ml-11 mb-2">{activity.description}</p>
                        <p className="text-xs text-gray-500 ml-11">–í–æ–∑—Ä–∞—Å—Ç: {activity.ageRange}</p>
                      </div>
                      <div className="ml-4 flex flex-col gap-2">
                        <button 
                          onClick={() => {
                            if (isPremium) {
                              setSelectedActivity(activity);
                            } else {
                              setShowPayment(true);
                            }
                          }}
                          className={`px-4 py-2 rounded-lg font-medium transition-colors text-sm ${
                            isPremium 
                              ? 'bg-blue-500 text-white hover:bg-blue-600' 
                              : 'bg-gray-300 text-gray-500'
                          }`}
                        >
                          {isPremium ? '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' : '–ü—Ä–µ–º–∏—É–º'}
                        </button>
                        <button 
                          onClick={() => {
                            if (isPremium) {
                              if (window.Telegram?.WebApp) {
                                window.Telegram.WebApp.showAlert(`–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "${activity.title}" –Ω–∞—á–∞—Ç–∞! ‚ú®`);
                              } else {
                                alert(`–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "${activity.title}" –Ω–∞—á–∞—Ç–∞! ‚ú®`);
                              }
                            } else {
                              setShowPayment(true);
                            }
                          }}
                          className={`px-4 py-2 rounded-lg font-medium transition-colors text-sm ${
                            isPremium 
                              ? 'bg-purple-500 text-white hover:bg-purple-600' 
                              : 'bg-gray-300 text-gray-500'
                          }`}
                        >
                          {isPremium ? '–ù–∞—á–∞—Ç—å' : '–ü—Ä–µ–º–∏—É–º'}
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Upgrade prompt for non-premium users */}
          {!isPremium && premiumActivities.length > 0 && (
            <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-xl p-6 text-white text-center">
              <h3 className="text-lg font-bold mb-2">üöÄ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!</h3>
              <p className="text-sm opacity-90 mb-4">
                –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ {premiumActivities.length} –ø—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
              </p>
              <div className="bg-white bg-opacity-20 rounded-lg p-3 mb-4">
                <div className="text-sm space-y-1">
                  <p>‚ú® –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã</p>
                  <p>üìö –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤</p>
                  <p>üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–∑–≤–∏—Ç–∏—è</p>
                  <p>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</p>
                </div>
              </div>
              <button 
                onClick={() => setShowPayment(true)}
                className="bg-white text-purple-600 px-6 py-3 rounded-lg font-medium hover:bg-gray-100 transition-colors"
              >
                –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º - 299‚ÇΩ/–º–µ—Å
              </button>
            </div>
          )}

          {/* No activities message */}
          {filteredActivities.length === 0 && (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üéØ</div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
              <p className="text-gray-600 mb-6">
                –î–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {child.age} {getAgeText(child.age)} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{selectedCategory}" –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç
              </p>
              <button 
                onClick={() => setSelectedCategory('all')}
                className="bg-blue-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-600 transition-colors"
              >
                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
              </button>
            </div>
          )}
        </div>
      </div>
    );
  }

  // –î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (selectedActivity) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="bg-white shadow-sm px-4 py-4 sticky top-0 z-10">
          <div className="flex items-center">
            <button 
              onClick={() => setSelectedActivity(null)}
              className="mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <span className="text-2xl">‚Üê</span>
            </button>
            <div className="flex items-center">
              <span className="text-2xl mr-3">{selectedActivity.icon}</span>
              <div>
                <h1 className="text-xl font-bold text-gray-800">{selectedActivity.title}</h1>
                <p className="text-sm text-gray-600">{selectedActivity.ageRange} ‚Ä¢ {selectedActivity.duration}</p>
              </div>
            </div>
          </div>
        </div>

        <div className="px-4 py-6">
          {/* Activity Info */}
          <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
            <div className="flex items-center gap-2 mb-4">
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${getCategoryColor(selectedActivity.category)}`}>
                {selectedActivity.category}
              </span>
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${getDifficultyColor(selectedActivity.difficulty)}`}>
                {selectedActivity.difficulty}
              </span>
              {selectedActivity.premium && (
                <span className="px-3 py-1 bg-yellow-100 text-yellow-800 text-sm rounded-full font-medium">
                  üëë –ü—Ä–µ–º–∏—É–º
                </span>
              )}
            </div>
            
            <p className="text-gray-700 mb-4">{selectedActivity.description}</p>
            
            <div className="bg-blue-50 rounded-lg p-4">
              <h3 className="font-semibold text-blue-900 mb-2">üéØ –ü–æ–ª—å–∑–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:</h3>
              <p className="text-blue-800 text-sm">{selectedActivity.benefits}</p>
            </div>
          </div>

          {/* Materials */}
          <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
            <h3 className="text-lg font-bold text-gray-800 mb-4">üì¶ –ß—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:</h3>
            <div className="grid grid-cols-1 gap-2">
              {selectedActivity.materials.map((material, index) => (
                <div key={index} className="flex items-center p-3 bg-gray-50 rounded-lg">
                  <span className="text-green-500 mr-3">‚úì</span>
                  <span className="text-gray-700">{material}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Instructions */}
          <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
            <h3 className="text-lg font-bold text-gray-800 mb-4">üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
            <div className="space-y-3">
              {selectedActivity.instructions.map((instruction, index) => (
                <div key={index} className="flex items-start p-3 bg-gray-50 rounded-lg">
                  <span className="bg-blue-500 text-white w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold mr-3 mt-0.5 flex-shrink-0">
                    {index + 1}
                  </span>
                  <span className="text-gray-700">{instruction}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="space-y-3">
            <button 
              onClick={() => {
                if (window.Telegram?.WebApp) {
                  window.Telegram.WebApp.showAlert(`üöÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "${selectedActivity.title}" –Ω–∞—á–∞—Ç–∞!\n\n–£–¥–∞—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —Å ${child.name}! üí™`);
                } else {
                  alert(`üöÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "${selectedActivity.title}" –Ω–∞—á–∞—Ç–∞!\n\n–£–¥–∞—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —Å ${child.name}! üí™`);
                }
              }}
              className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white py-4 rounded-xl font-medium text-lg hover:from-green-600 hover:to-blue-600 transition-all"
            >
              üöÄ –ù–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            </button>
            
            <div className="grid grid-cols-2 gap-3">
              <button 
                onClick={() => {
                  if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.showAlert(`‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞ ${selectedActivity.duration} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`);
                  } else {
                    alert(`‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞ ${selectedActivity.duration} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`);
                  }
                }}
                className="bg-white text-gray-700 py-3 rounded-lg font-medium border-2 border-gray-200 hover:border-gray-300 transition-colors"
              >
                ‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
              </button>
              <button 
                onClick={() => {
                  if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.showAlert('üì∏ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≥–∞–ª–µ—Ä–µ—é!');
                  } else {
                    alert('üì∏ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≥–∞–ª–µ—Ä–µ—é!');
                  }
                }}
                className="bg-white text-gray-700 py-3 rounded-lg font-medium border-2 border-gray-200 hover:border-gray-300 transition-colors"
              >
                üì∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              </button>
            </div>
            
            <button 
              onClick={() => {
                if (botConnected) {
                  sendTestNotification();
                } else {
                  if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.showAlert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!');
                  } else {
                    alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!');
                  }
                }
              }}
              className="w-full bg-purple-500 text-white py-3 rounded-lg font-medium hover:bg-purple-600 transition-colors"
            >
              üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞
            </button>
          </div>
        </div>
      </div>
    );
  }
  
// –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
  if (currentScreen === 'settings') {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="bg-white shadow-sm px-4 py-4 sticky top-0 z-10">
          <div className="flex items-center">
            <button 
              onClick={() => setCurrentScreen('main')}
              className="mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <span className="text-2xl">‚Üê</span>
            </button>
            <div>
              <h1 className="text-xl font-bold text-gray-800">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
              <p className="text-sm text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π</p>
            </div>
          </div>
        </div>

        <div className="px-4 py-6">
          {/* Child Info */}
          <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
            <h2 className="text-lg font-bold text-gray-800 mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">–ò–º—è</label>
                <input 
                  type="text" 
                  value={child.name}
                  onChange={(e) => setChild({...child, name: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">–í–æ–∑—Ä–∞—Å—Ç</label>
                <select 
                  value={child.age}
                  onChange={(e) => setChild({...child, age: parseInt(e.target.value)})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  {[1,2,3,4,5,6,7].map(age => (
                    <option key={age} value={age}>{age} {getAgeText(age)}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Telegram Integration Status */}
          <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
            <h2 className="text-lg font-bold text-gray-800 mb-4">Telegram –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</h2>
            
            {/* User Info */}
            {telegramUser && (
              <div className="bg-blue-50 rounded-lg p-4 mb-4">
                <div className="flex items-center">
                  <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mr-3">
                    <span className="text-white text-lg">üë§</span>
                  </div>
                  <div>
                    <h3 className="font-semibold text-blue-900">{telegramUser.first_name}</h3>
                    <p className="text-sm text-blue-700">
                      @{telegramUser.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} ‚Ä¢ ID: {telegramUser.id}
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Bot Connection Status */}
            <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg mb-4">
              <div className="flex items-center">
                <span className="text-2xl mr-3">ü§ñ</span>
                <div>
                  <h3 className="font-medium text-gray-800">Telegram –ë–æ—Ç</h3>
                  <p className="text-sm text-gray-600">
                    @{notificationSettings.botUsername}
                  </p>
                </div>
              </div>
              <div className="flex items-center">
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                  botConnected ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                }`}>
                  {botConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
                </span>
                {botConnected && (
                  <span className="w-3 h-3 bg-green-500 rounded-full ml-2"></span>
                )}
              </div>
            </div>

            {/* Bot Actions */}
            <div className="grid grid-cols-1 gap-3">
              {!botConnected ? (
                <button 
                  onClick={connectToBot}
                  className="bg-blue-500 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-600 transition-colors"
                >
                  üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
                </button>
              ) : (
                <>
                  <button 
                    onClick={() => setCurrentScreen('notifications')}
                    className="bg-blue-500 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-600 transition-colors"
                  >
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  </button>
                  <button 
                    onClick={sendTestNotification}
                    className="bg-purple-500 text-white py-3 px-4 rounded-lg font-medium hover:bg-purple-600 transition-colors"
                  >
                    üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  </button>
                </>
              )}
            </div>
          </div>

          {/* Premium Status */}
          <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
            <h2 className="text-lg font-bold text-gray-800 mb-4">–ü–æ–¥–ø–∏—Å–∫–∞</h2>
            {isPremium ? (
              <div className="text-center py-4">
                <div className="bg-gradient-to-r from-purple-600 to-pink-600 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-white text-2xl">üëë</span>
                </div>
                <h3 className="text-lg font-bold text-gray-800">–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω</h3>
                <p className="text-gray-600 mb-4">–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</p>
                
                <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-4 mb-4">
                  <div className="text-sm text-gray-600 space-y-1">
                    <p>‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
                    <p>‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã</p>
                    <p>‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</p>
                    <p>‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</p>
                  </div>
                </div>

                <button 
                  onClick={() => {
                    setIsPremium(false);
                    if (window.Telegram?.WebApp) {
                      window.Telegram.WebApp.showAlert('–ü—Ä–µ–º–∏—É–º –æ—Ç–∫–ª—é—á–µ–Ω (–¥–ª—è –¥–µ–º–æ)');
                    }
                  }}
                  className="text-red-600 hover:text-red-700 text-sm underline"
                >
                  –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º (–¥–ª—è —Ç–µ—Å—Ç–∞)
                </button>
              </div>
            ) : (
              <div className="text-center py-4">
                <div className="text-6xl mb-4">üíé</div>
                <h3 className="text-lg font-bold text-gray-800 mb-2">–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h3>
                <p className="text-gray-600 mb-4">
                  –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                </p>
                
                <div className="bg-gray-50 rounded-lg p-4 mb-6">
                  <div className="text-sm text-gray-600 space-y-2">
                    <div className="flex items-center justify-center">
                      <span className="text-purple-500 mr-2">üëë</span>
                      <span>–í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</span>
                    </div>
                    <div className="flex items-center justify-center">
                      <span className="text-blue-500 mr-2">üìä</span>
                      <span>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</span>
                    </div>
                    <div className="flex items-center justify-center">
                      <span className="text-green-500 mr-2">üéØ</span>
                      <span>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–∑–≤–∏—Ç–∏—è</span>
                    </div>
                    <div className="flex items-center justify-center">
                      <span className="text-orange-500 mr-2">üìö</span>
                      <span>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</span>
                    </div>
                  </div>
                </div>

                <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-4 mb-6">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                    <span className="text-2xl font-bold text-purple-600">299‚ÇΩ/–º–µ—Å</span>
                  </div>
                  <p className="text-sm text-gray-500 mt-1">–∏–ª–∏ 50 ‚≠ê Telegram Stars</p>
                </div>

                <button 
                  onClick={() => setShowPayment(true)}
                  className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-3 rounded-lg font-medium hover:from-purple-700 hover:to-pink-700 transition-all"
                >
                  –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–º–∏—É–º
                </button>
              </div>
            )}
          </div>

          {/* App Info */}
          <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
            <h2 className="text-lg font-bold text-gray-800 mb-4">–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h2>
            <div className="space-y-3">
              <div className="flex items-center justify-between py-2 border-b border-gray-100">
                <span className="text-gray-600">–í–µ—Ä—Å–∏—è</span>
                <span className="font-medium text-gray-800">1.0.0</span>
              </div>
              <div className="flex items-center justify-between py-2 border-b border-gray-100">
                <span className="text-gray-600">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</span>
                <span className="font-medium text-gray-800">–†–∞–∑–≤–∏–≤–∞–π–∫–∞ Team</span>
              </div>
              <div className="flex items-center justify-between py-2 border-b border-gray-100">
                <span className="text-gray-600">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</span>
                <span className="font-medium text-gray-800">23.01.2025</span>
              </div>
              <div className="flex items-center justify-between py-2">
                <span className="text-gray-600">Telegram Bot</span>
                <span className="font-medium text-gray-800">@{notificationSettings.botUsername}</span>
              </div>
            </div>
          </div>

          {/* Support & Feedback */}
          <div className="bg-white rounded-xl p-6 shadow-sm">
            <h2 className="text-lg font-bold text-gray-800 mb-4">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</h2>
            <div className="space-y-3">
              <button 
                onClick={() => {
                  if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.openLink('https://t.me/razvivay–∫–∞_support');
                  } else {
                    window.open('https://t.me/razvivay–∫–∞_support', '_blank');
                  }
                }}
                className="w-full bg-blue-500 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-600 transition-colors flex items-center justify-center"
              >
                <span className="mr-2">üí¨</span>
                –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
              </button>
              
              <button 
                onClick={() => {
                  if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.showPopup({
                      title: '–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                      message: '–ù—Ä–∞–≤–∏—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ? –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É!',
                      buttons: [
                        {id: 'rate', type: 'default', text: '–û—Ü–µ–Ω–∏—Ç—å'},
                        {id: 'cancel', type: 'cancel', text: '–û—Ç–º–µ–Ω–∞'}
                      ]
                    }, (buttonId) => {
                      if (buttonId === 'rate') {
                        window.Telegram.WebApp.showAlert('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê');
                      }
                    });
                  } else {
                    alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê');
                  }
                }}
                className="w-full bg-yellow-500 text-white py-3 px-4 rounded-lg font-medium hover:bg-yellow-600 transition-colors flex items-center justify-center"
              >
                <span className="mr-2">‚≠ê</span>
                –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
              </button>
              
              <button 
                onClick={() => {
                  if (window.Telegram?.WebApp) {
                    window.Telegram.WebApp.openLink('https://razvivay–∫–∞.ru/privacy');
                  } else {
                    window.open('https://razvivay–∫–∞.ru/privacy', '_blank');
                  }
                }}
                className="w-full bg-gray-500 text-white py-3 px-4 rounded-lg font-medium hover:bg-gray-600 transition-colors flex items-center justify-center"
              >
                <span className="mr-2">üìã</span>
                –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-white shadow-sm px-4 py-4 sticky top-0 z-10">
        <div className="flex items-center">
          <button 
            onClick={() => setCurrentScreen('main')}
            className="mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
          >
            <span className="text-2xl">‚Üê</span>
          </button>
          <h1 className="text-xl font-bold text-gray-800">–≠–∫—Ä–∞–Ω: {currentScreen}</h1>
        </div>
      </div>
      
      <div className="px-4 py-20 text-center">
        <h2 className="text-xl font-bold mb-4">–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h2>
        <p className="text-gray-600 mb-6">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö</p>
        <button 
          onClick={() => setCurrentScreen('main')}
          className="bg-blue-500 text-white px-6 py-2 rounded-lg"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
      </div>
    </div>
  );

};

export default ChildDevelopmentApp;
