import React, { useState } from 'react';

const ChildDevelopmentApp = () => {
  const [currentScreen, setCurrentScreen] = useState('main');
  const [isPremium, setIsPremium] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedActivity, setSelectedActivity] = useState(null);
  const [child, setChild] = useState({
    name: '–ê–Ω–¥—Ä–µ–π',
    age: 2,
    streak: 7
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notificationSettings, setNotificationSettings] = useState({
    enabled: true,
    time: '19:00',
    frequency: 'daily',
    reminderType: 'motivational',
    quietHours: {
      enabled: true,
      start: '21:00',
      end: '08:00'
    },
    weekendMode: false,
    customDays: {
      monday: true,
      tuesday: true,
      wednesday: true,
      thursday: true,
      friday: true,
      saturday: true,
      sunday: false
    }
  });

  // –ë–∞–∑–∞ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const [motivationalMessages] = useState({
    daily: [
      'üåü –í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å {name}! –°–µ–≥–æ–¥–Ω—è –∏–∑—É—á–∞–µ–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ?',
      'üí´ {name} –∂–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ß—Ç–æ –≤—ã–±–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è?',
      'üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º streak! –£–∂–µ {streak} –¥–Ω–µ–π —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è –≤–º–µ—Å—Ç–µ!',
      'üöÄ –ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å {name}! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ!',
      '‚≠ê {name} –≥–æ—Ç–æ–≤(–∞) –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º! –ù–∞—á–∏–Ω–∞–µ–º?',
      'üéà –í—Ä–µ–º—è –≤–µ—Å–µ–ª–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å {name}!',
      'üåà –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å {name} —Å–µ–≥–æ–¥–Ω—è!'
    ],
    streak: [
      'üî• –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! {name} –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!',
      'üëë –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π streak - {streak} –¥–Ω–µ–π! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!',
      'üèÜ {streak} –¥–Ω–µ–π –∑–∞–Ω—è—Ç–∏–π! {name} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–º–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!',
      '‚ö° –£–∂–µ {streak} –¥–Ω–µ–π! –í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏!',
      'üéä {streak} –¥–Ω–µ–π —Ä–∞–∑–≤–∏—Ç–∏—è! {name} –≥–æ—Ä–¥–∏—Ç—Å—è –≤–∞–º–∏!'
    ],
    encouragement: [
      'üí™ –î–∞–∂–µ 10 –º–∏–Ω—É—Ç –∑–∞–Ω—è—Ç–∏–π –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–æ–ª—å–∑—É {name}!',
      'üå± –ö–∞–∂–¥–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç {name} —Ä–∞—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!',
      '‚ù§Ô∏è {name} –ª—é–±–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –≤–∞–º–∏ –∑–∞ –∏–≥—Ä–∞–º–∏!',
      'üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∏–≥—Ä—ã —Ä–∞–∑–≤–∏–≤–∞—é—Ç –º–æ–∑–≥ {name}!',
      'üìö –°–µ–≥–æ–¥–Ω—è {name} –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ!'
    ],
    ageSpecific: {
      1: 'üë∂ –ú–∞–ª—ã—à {name} –ø–æ–∑–Ω–∞–µ—Ç –º–∏—Ä —á–µ—Ä–µ–∑ –æ—â—É—â–µ–Ω–∏—è!',
      2: 'üß∏ {name} –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞–µ—Ç –æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä!',
      3: 'üé≠ {name} –≥–æ—Ç–æ–≤(–∞) –∫ —Ä–æ–ª–µ–≤—ã–º –∏–≥—Ä–∞–º –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É!',
      4: 'üî§ {name} –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã!',
      5: 'üìñ {name} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —à–∫–æ–ª–µ - –≤—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!',
      6: 'üéì {name} —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —à–∫–æ–ª—ã!',
      7: 'üöÄ {name} –≥–æ—Ç–æ–≤(–∞) –∫ —Å–ª–æ–∂–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∑–∞–¥–∞—á–∞–º!'
    }
  });

  // –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notificationHistory] = useState([
    {
      id: 1,
      message: '–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å –ê–Ω–¥—Ä–µ–π! –°–µ–≥–æ–¥–Ω—è –∏–∑—É—á–∞–µ–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ?',
      timestamp: '2025-01-14 19:00',
      type: 'daily',
      opened: true
    },
    {
      id: 2,
      message: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –ê–Ω–¥—Ä–µ–π –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!',
      timestamp: '2025-01-13 19:00',
      type: 'streak',
      opened: true
    },
    {
      id: 3,
      message: '–ê–Ω–¥—Ä–µ–π –∂–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ß—Ç–æ –≤—ã–±–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è?',
      timestamp: '2025-01-12 19:00',
      type: 'daily',
      opened: false
    }
  ]);

  const getAgeText = (age) => {
    if (age === 1) return '–≥–æ–¥';
    if (age < 5) return '–≥–æ–¥–∞';
    return '–ª–µ—Ç';
  };

  const getCategoryColor = (category) => {
    const colors = {
      '–ú–æ—Ç–æ—Ä–∏–∫–∞': 'bg-blue-100 text-blue-800',
      '–†–µ—á—å': 'bg-green-100 text-green-800',
      '–õ–æ–≥–∏–∫–∞': 'bg-purple-100 text-purple-800',
      '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ': 'bg-pink-100 text-pink-800',
      '–†–∞–∑–≤–∏—Ç–∏–µ': 'bg-orange-100 text-orange-800'
    };
    return colors[category] || 'bg-gray-100 text-gray-800';
  };

  const getNotificationTypeColor = (type) => {
    const colors = {
      'daily': 'bg-blue-100 text-blue-800',
      'streak': 'bg-orange-100 text-orange-800',
      'encouragement': 'bg-green-100 text-green-800',
      'reminder': 'bg-purple-100 text-purple-800'
    };
    return colors[type] || 'bg-gray-100 text-gray-800';
  };

  const getRandomMessage = (type) => {
    const messages = motivationalMessages[type] || motivationalMessages.daily;
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    return randomMessage
      .replace('{name}', child.name)
      .replace('{streak}', child.streak);
  };

  // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
  if (currentScreen === 'main') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
        <div className="bg-white shadow-sm px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-800">–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã</h1>
              <p className="text-gray-600">–í–æ–∑—Ä–∞—Å—Ç: {child.age} {getAgeText(child.age)}</p>
            </div>
            <div className="flex items-center space-x-3">
              <div className="flex items-center bg-orange-100 px-3 py-1 rounded-full">
                <span className="text-sm font-medium text-orange-800">üèÜ {child.streak} –¥–Ω–µ–π</span>
              </div>
              <button 
                onClick={() => setCurrentScreen('notifications')}
                className="p-2 bg-gray-100 rounded-full hover:bg-gray-200 transition-colors relative"
              >
                <span className="text-xl">üîî</span>
                {notificationSettings.enabled && (
                  <span className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full"></span>
                )}
              </button>
              <button 
                onClick={() => setCurrentScreen('settings')}
                className="p-2 bg-gray-100 rounded-full hover:bg-gray-200 transition-colors"
              >
                ‚öôÔ∏è
              </button>
            </div>
          </div>
        </div>

        {/* Notification Preview */}
        {notificationSettings.enabled && (
          <div className="mx-4 mt-4 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-bold flex items-center">
                  üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
                </h3>
                <p className="text-sm opacity-90">–°–ª–µ–¥—É—é—â–µ–µ –≤ {notificationSettings.time}</p>
              </div>
              <button 
                onClick={() => setCurrentScreen('notifications')}
                className="bg-white bg-opacity-20 text-white px-4 py-2 rounded-lg font-medium hover:bg-opacity-30 transition-colors"
              >
                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
              </button>
            </div>
          </div>
        )}

        {!isPremium && (
          <div className="mx-4 mt-4 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg p-4 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-bold flex items-center">üëë –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</h3>
                <p className="text-sm opacity-90">–û—Ç–∫—Ä–æ–π –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</p>
              </div>
              <button 
                onClick={() => setIsPremium(true)}
                className="bg-white text-purple-600 px-4 py-2 rounded-lg font-medium hover:bg-gray-100 transition-colors"
              >
                –ü–æ–¥–∫–ª—é—á–∏—Ç—å
              </button>
            </div>
          </div>
        )}

        <div className="px-4 py-6">
          <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
            <div className="text-center mb-6">
              <div className="bg-gradient-to-r from-green-400 to-blue-500 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-white text-3xl">‚ñ∂Ô∏è</span>
              </div>
              <h2 className="text-xl font-bold text-gray-800 mb-2">–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è!</h2>
              <p className="text-gray-600">–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è {child.name}</p>
            </div>
            
            <button 
              onClick={() => setCurrentScreen('activities')}
              className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white py-4 rounded-xl font-medium text-lg hover:from-green-600 hover:to-blue-600 transition-all transform hover:scale-105"
            >
              –ù–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            </button>
          </div>

          <div className="grid grid-cols-2 gap-4 mb-6">
            <div className="bg-white rounded-xl p-4 shadow-sm">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-2xl font-bold text-blue-600">12</p>
                  <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
                </div>
                <span className="text-2xl">üéØ</span>
              </div>
            </div>
            <div className="bg-white rounded-xl p-4 shadow-sm">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-2xl font-bold text-purple-600">4—á</p>
                  <p className="text-sm text-gray-600">–í—Ä–µ–º—è —Ä–∞–∑–≤–∏—Ç–∏—è</p>
                </div>
                <span className="text-2xl">‚è∞</span>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <button 
              onClick={() => setCurrentScreen('progress')}
              className="bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow"
            >
              <div className="flex items-center justify-center mb-2">
                <span className="text-2xl">üìÖ</span>
              </div>
              <p className="text-sm font-medium text-gray-800">–ü—Ä–æ–≥—Ä–µ—Å—Å</p>
            </button>
            <button 
              onClick={() => setCurrentScreen('library')}
              className="bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow"
            >
              <div className="flex items-center justify-center mb-2">
                <span className="text-2xl">üìö</span>
              </div>
              <p className="text-sm font-medium text-gray-800">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞</p>
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –ù–û–í–´–ô –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (currentScreen === 'notifications') {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="bg-white shadow-sm px-4 py-4 sticky top-0 z-10">
          <div className="flex items-center">
            <button 
              onClick={() => setCurrentScreen('main')}
              className="mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <span className="text-2xl">‚Üê</span>
            </button>
            <div>
              <h1 className="text-xl font-bold text-gray-800">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</h1>
              <p className="text-sm text-gray-600">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö</p>
            </div>
          </div>
        </div>

        <div className="px-4 py-6">
          {/* Main Toggle */}
          <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-lg font-bold text-gray-800">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
                <p className="text-sm text-gray-600">–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö</p>
              </div>
              <button 
                onClick={() => setNotificationSettings({
                  ...notificationSettings, 
                  enabled: !notificationSettings.enabled
                })}
                className={`w-12 h-6 rounded-full p-1 transition-colors ${
                  notificationSettings.enabled ? 'bg-green-500' : 'bg-gray-300'
                }`}
              >
                <div className={`w-4 h-4 rounded-full bg-white transition-transform ${
                  notificationSettings.enabled ? 'translate-x-6' : 'translate-x-0'
                }`}></div>
              </button>
            </div>

            {notificationSettings.enabled && (
              <div className="space-y-4">
                {/* Time Setting */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                  </label>
                  <input 
                    type="time" 
                    value={notificationSettings.time}
                    onChange={(e) => setNotificationSettings({
                      ...notificationSettings, 
                      time: e.target.value
                    })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                {/* Frequency Setting */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                  </label>
                  <select 
                    value={notificationSettings.frequency}
                    onChange={(e) => setNotificationSettings({
                      ...notificationSettings, 
                      frequency: e.target.value
                    })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
                    <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
                    <option value="custom">–í—ã–±—Ä–∞—Ç—å –¥–Ω–∏</option>
                  </select>
                </div>

                {/* Custom Days */}
                {notificationSettings.frequency === 'custom' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-3">
                      –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
                    </label>
                    <div className="grid grid-cols-2 gap-2">
                      {[
                        { key: 'monday', label: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
                        { key: 'tuesday', label: '–í—Ç–æ—Ä–Ω–∏–∫' },
                        { key: 'wednesday', label: '–°—Ä–µ–¥–∞' },
                        { key: 'thursday', label: '–ß–µ—Ç–≤–µ—Ä–≥' },
                        { key: 'friday', label: '–ü—è—Ç–Ω–∏—Ü–∞' },
                        { key: 'saturday', label: '–°—É–±–±–æ—Ç–∞' },
                        { key: 'sunday', label: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' }
                      ].map((day) => (
                        <button
                          key={day.key}
                          onClick={() => setNotificationSettings({
                            ...notificationSettings,
                            customDays: {
                              ...notificationSettings.customDays,
                              [day.key]: !notificationSettings.customDays[day.key]
                            }
                          })}
                          className={`p-3 rounded-lg text-sm font-medium transition-colors ${
                            notificationSettings.customDays[day.key]
                              ? 'bg-blue-500 text-white'
                              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                          }`}
                        >
                          {day.label}
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Notification Type */}
          {notificationSettings.enabled && (
            <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
              <h2 className="text-lg font-bold text-gray-800 mb-4">–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π</h2>
              <div className="space-y-3">
                {[
                  { 
                    value: 'motivational', 
                    label: '–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ', 
                    description: '–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π',
                    example: getRandomMessage('daily')
                  },
                  { 
                    value: 'simple', 
                    label: '–ü—Ä–æ—Å—Ç—ã–µ', 
                    description: '–ö—Ä–∞—Ç–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏–π',
                    example: '–í—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π —Å –ê–Ω–¥—Ä–µ–π!'
                  },
                  { 
                    value: 'streak', 
                    label: '–° streak', 
                    description: '–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
                    example: getRandomMessage('streak')
                  }
                ].map((type) => (
                  <button
                    key={type.value}
                    onClick={() => setNotificationSettings({
                      ...notificationSettings,
                      reminderType: type.value
                    })}
                    className={`w-full p-4 rounded-lg border-2 transition-colors text-left ${
                      notificationSettings.reminderType === type.value
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-semibold text-gray-800">{type.label}</h3>
                      {notificationSettings.reminderType === type.value && (
                        <span className="text-blue-500">‚úì</span>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{type.description}</p>
                    <p className="text-xs text-gray-500 italic">"{type.example}"</p>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Advanced Settings */}
          {notificationSettings.enabled && (
            <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
              <h2 className="text-lg font-bold text-gray-800 mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
              
              {/* Quiet Hours */}
              <div className="mb-4">
                <div className="flex items-center justify-between mb-3">
                  <div>
                    <h3 className="font-semibold text-gray-800">–¢–∏—Ö–∏–µ —á–∞—Å—ã</h3>
                    <p className="text-sm text-gray-600">–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ—á—å—é</p>
                  </div>
                  <button 
                    onClick={() => setNotificationSettings({
                      ...notificationSettings,
                      quietHours: {
                        ...notificationSettings.quietHours,
                        enabled: !notificationSettings.quietHours.enabled
                      }
                    })}
                    className={`w-12 h-6 rounded-full p-1 transition-colors ${
                      notificationSettings.quietHours.enabled ? 'bg-green-500' : 'bg-gray-300'
                    }`}
                  >
                    <div className={`w-4 h-4 rounded-full bg-white transition-transform ${
                      notificationSettings.quietHours.enabled ? 'translate-x-6' : 'translate-x-0'
                    }`}></div>
                  </button>
                </div>

                {notificationSettings.quietHours.enabled && (
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm text-gray-600 mb-1">–°</label>
                      <input 
                        type="time" 
                        value={notificationSettings.quietHours.start}
                        onChange={(e) => setNotificationSettings({
                          ...notificationSettings,
                          quietHours: {
                            ...notificationSettings.quietHours,
                            start: e.target.value
                          }
                        })}
                        className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-sm text-gray-600 mb-1">–î–æ</label>
                      <input 
                        type="time" 
                        value={notificationSettings.quietHours.end}
                        onChange={(e) => setNotificationSettings({
                          ...notificationSettings,
                          quietHours: {
                            ...notificationSettings.quietHours,
                            end: e.target.value
                          }
                        })}
                        className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                      />
                    </div>
                  </div>
                )}
              </div>

              {/* Weekend Mode */}
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-semibold text-gray-800">–†–µ–∂–∏–º –≤—ã—Ö–æ–¥–Ω—ã—Ö</h3>
                  <p className="text-sm text-gray-600">–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö</p>
                </div>
                <button 
                  onClick={() => setNotificationSettings({
                    ...notificationSettings,
                    weekendMode: !notificationSettings.weekendMode
                  })}
                  className={`w-12 h-6 rounded-full p-1 transition-colors ${
                    notificationSettings.weekendMode ? 'bg-green-500' : 'bg-gray-300'
                  }`}
                >
                  <div className={`w-4 h-4 rounded-full bg-white transition-transform ${
                    notificationSettings.weekendMode ? 'translate-x-6' : 'translate-x-0'
                  }`}></div>
                </button>
              </div>
            </div>
          )}

          {/* Test Notification */}
          {notificationSettings.enabled && (
            <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
              <h2 className="text-lg font-bold text-gray-800 mb-4">–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h2>
              <p className="text-sm text-gray-600 mb-4">
                –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              </p>
              
              <div className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded-lg mb-4">
                <div className="flex items-center mb-2">
                  <span className="text-blue-500 mr-2">üîî</span>
                  <span className="font-semibold text-blue-900">–†–∞–∑–≤–∏–≤–∞–π–∫–∞</span>
                  <span className="text-xs text-blue-600 ml-auto">{notificationSettings.time}</span>
                </div>
                <p className="text-blue-800">
                  {getRandomMessage(notificationSettings.reminderType)}
                </p>
              </div>

              <button className="w-full bg-blue-500 text-white py-3 rounded-lg font-medium hover:bg-blue-600 transition-colors">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              </button>
            </div>
          )}

          {/* Notification History */}
          <div className="bg-white rounded-xl p-6 shadow-sm">
            <h2 className="text-lg font-bold text-gray-800 mb-4">–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
            <div className="space-y-3">
              {notificationHistory.map((notification) => (
                <div 
                  key={notification.id} 
                  className={`p-3 rounded-lg ${
                    notification.opened ? 'bg-gray-50' : 'bg-blue-50'
                  }`}
                >
                  <div className="flex items-center justify-between mb-2">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getNotificationTypeColor(notification.type)}`}>
                      {notification.type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ' : 
                       notification.type === 'streak' ? 'Streak' : '–î—Ä—É–≥–æ–µ'}
                    </span>
                    <span className="text-xs text-gray-500">
                      {new Date(notification.timestamp).toLocaleString('ru-RU')}
                    </span>
                  </div>
                  <p className="text-sm text-gray-700">{notification.message}</p>
                  {!notification.opened && (
                    <span className="inline-block w-2 h-2 bg-blue-500 rounded-full mt-2"></span>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-white shadow-sm px-4 py-4 sticky top-0 z-10">
        <div className="flex items-center">
          <button 
            onClick={() => setCurrentScreen('main')}
            className="mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
          >
            <span className="text-2xl">‚Üê</span>
          </button>
          <h1 className="text-xl font-bold text-gray-800">–≠–∫—Ä–∞–Ω: {currentScreen}</h1>
        </div>
      </div>
      
      <div className="px-4 py-20 text-center">
        <h2 className="text-xl font-bold mb-4">–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h2>
        <p className="text-gray-600 mb-6">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö</p>
        <button 
          onClick={() => setCurrentScreen('main')}
          className="bg-blue-500 text-white px-6 py-2 rounded-lg"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
      </div>
    </div>
  );
};

export default ChildDevelopmentApp;
